{
  "subquestion": "How can I use maxcompdim to regularize my model?",
  "variations": [
    "What are the ways to use maxcompdim for model regularization?",
    "How is maxcompdim applied for regularizing a model?",
    "Can you describe how to use maxcompdim to regularize a model?",
    "What steps should I follow to regularize my model using maxcompdim?",
    "How can maxcompdim be used for the regularization of a model?"
  ],
  "keywords": [
    "maxcompdim"
  ],
  "raw_results": [
    {
      "chunk_id": "a6d2a3a086ad",
      "chunk_index": 1,
      "content": "As described in section 15.8, if PEST stores the Jacobian matrix internally in compressed form then it is stored in column order; that is, all elements pertaining to the first parameter are stored first, then for the second, etc.; zero-valued elements are omitted. As was explained in section 15.2, if derivatives are supplied in an external derivatives file, and if the compressed protocol is employed for this file, then the time required to read and process the elements of the derivatives matrix may be reduced if these elements are supplied in the same order as that in which PEST stores elements of the compressed Jacobian matrix. This will especially be the case on the first occasion that the matrix is read, for on that occasion a constant rearrangement of compressed storage elements within PEST’s memory will be the inevitable.\nresult of supplying these elements in random order. However no such re-arrangement is necessary if all derivative matrix elements for parameter number 1 are supplied first (in order of increasing observation number), followed by all elements for parameter 2, etc.\nRecall from section 15.4.2 however, that problems with Jacobian matrix access can also be reduced if the value for MAXCOMPDIM is chosen wisely. Recall that a suitable choice for MAXCOMPDIM may promulgate storage of the observation submatrix of the overall Jacobian submatrix in the more easily accessible standard form. However memory resources must be large enough to allow this. If they are not, then loss of efficiency incurred through compressed Jacobian element rearrangement on the first occasion on which the external derivatives file is read by PEST will occur if prior information is used in the inversion process (for derivatives pertaining to prior information equations are stored at the lower rows of the Jacobian matrix). This problem can be overcome through the use of the indexed prior information protocol discussed in the previous subsection. However if you do not wish to do this, you may wish to consider supplying all regularisation constraints (even linear constraints) as “observations” (computed by the model) rather than as prior information equations in the “prior information” section of the PEST control file, for then the respective elements of the Jacobian matrix can be supplied in correct order. When doing this, care must be taken when supplying derivatives for log-transformed parameters. For example the derivative with respect to par1 of the relationship log(par1) – log(par2) = 0 is 1.0/par1/2.303. If the parameter par1 is log-transformed by PEST, this relationship becomes linear internally to PEST.",
      "header": "15.9 Accelerating Input of External Derivatives",
      "level": 2,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "8f648caef927",
      "next_id": "c331d6d1956a",
      "summary_self": "For faster processing of compressed external derivatives files, supply elements in the same order as PEST's compressed Jacobian matrix (column-major, omitting zeros).  Wise MAXCOMPDIM selection (section 15.4.2) may avoid this re-ordering. Using indexed prior information (previous subsection) or supplying regularization constraints as model-calculated observations avoids reordering issues.  Derivatives for log-transformed parameters require careful handling.",
      "summary_prev": "For indexed prior information (NPRIOR<0), the \"prior information\" section lists PILBL, PIVAL, WEIGHT, OBGNME per equation, followed by NUMINDEX lines specifying Jacobian matrix indices (column, row, value) for non-zero elements.  Faster compressed storage requires that the observation number varies most quickly and parameter numbers never decrease.  The value represents the parameter's factor in the equation.",
      "summary_next": "To increase PEST speed and reduce disk usage for many parameters, set RSTFLE to \"norestart\", JCOSAVE to \"nojcosave\", VERBOSEREC to \"noverboserec\", and ICOV, ICOR, IEIG, and IRES to 0.",
      "header_level_1": "15. Large Numbers of Parameters",
      "header_level_2": "",
      "header_summary_1": "This chapter discusses efficient calibration methods for models with tens of thousands of parameters using PEST. Adjoint techniques are recommended for highly parameterized models. Use compressed binary external derivatives files, 64-bit versions of PEST for large problems, and optimize Jacobian matrix storage. Prioritize linearity of regularization constraints and activate memory conservation for improved efficiency.",
      "header_summary_2": "",
      "keywords": [
        "MAXCOMPDIM"
      ],
      "similarity": 0.806208848953247,
      "normalized_semantic": 0.806208848953247,
      "normalized_keyword": 0.0251346509903669,
      "combined_score": 0.25945691037923097
    },
    {
      "chunk_id": "43c6e8ea67dc",
      "chunk_index": 1,
      "content": "To address this issue, PEST supports compressed internal storage of the Jacobian matrix. This compressed storage mechanism is supplemented by programming within PEST that accesses elements of the compressed Jacobian matrix in ways that are most efficient for the types of Jacobian matrix calculations normally undertaken by PEST. There is some loss in inversion speed incurred by the use of compressed Jacobian matrix storage; however the cost of compression has been reduced as much as possible.\nJacobian matrix compression is activated through use of an optional variable which resides on the third line of the “control data” section of the PEST control file. This variable is named MAXCOMPDIM; see figure 15.1 for its location. If MAXCOMPDIM is omitted from the PEST control file, or is set to 1 or less, no Jacobian compression takes place. If it is set to greater than 1, the vector which holds the compressed form of the Jacobian matrix is dimensioned as MAXCOMPDIM, and Jacobian compression takes place. If, in the course of its execution, PEST discovers that MAXCOMPDIM has not been set large enough to hold the compressed Jacobian matrix, it will cease execution with an appropriate error message.\n* control data\nRSTFLE PESTMODE\nNPAR NOBS NPARGP NPRIOR NOBSGP [MAXCOMPDIM] [DERZEROLIM]\nNTPLFLE NINSFLE PRECIS DPOINT [NUMCOM JACFILE MESSFILE] [OBSREREF]\nRLAMBDA1 RLAMFAC PHIRATSUF PHIREDLAM NUMLAM [JACUPDATE] [LAMFORGIVE] [DERFORGIVE]\nRELPARMAX FACPARMAX FACORIG [IBOUNDSTICK UPVECBEND] [ABSPARMAX]\nPHIREDSWH [NOPTSWITCH] [SPLITSWH] [DOAUI] [DOSENREUSE] [BOUNDSCALE]\nNOPTMAX PHIREDSTP NPHISTP NPHINORED RELPARSTP NRELPAR [PHISTOPTHRESH] [LASTRUN] [PHIABANDON]\nICOV ICOR IEIG [IRES] [JCOSAVE] [VERBOSEREC] [JCOSAVEITN] [REISAVEITN] [PARSAVEITN] [PARSAVERUN]\nFigure 15.1 “Control data” section of the PEST control file with the optional MAXCOMPDIM variable highlighted.\nThe exact manner in which PEST stores the compressed Jacobian matrix depends on the value that is supplied for MAXCOMPDIM. If it is possible, PEST tries to subdivide the Jacobian matrix into two submatrices. The first (with dimensions no×m) pertains only to observations; the second (with dimensions np×m) pertains only to prior information. Not only is the second submatrix normally much sparser than the first. Its elements need to be calculated only once.\nIf the user-supplied value for MAXCOMPDIM is greater than no×m + nnz + 10 where nnz, then number of non-zero elements in the prior information submatrix of the Jacobian matrix is the PEST will store the observation submatrix of the Jacobian matrix in standard form (to allow easy access to elements of this matrix). Meanwhile it stores the prior information submatrix of the Jacobian matrix in compressed format wherein internal indexing is such as to allow rapid access to neighbouring nonzero elements where nonzero elements are very sparse. In many inversion contexts nnz is easily calculated. For example if there are np prior information equations, and each such equation cites nc parameters, then nnz is readily calculated as np × n. c PEST knows soon after commencement of execution whether it can adopt this second.\nprotocol for storage of the Jacobian matrix. If it cannot, then it adopts the first protocol wherein compressed storage is implemented for the entirety of the Jacobian matrix. However this brings with it the problem that PEST does not have foreknowledge of how many zero-valued elements the observation component of the Jacobian matrix will contain. This can only be known as the Jacobian matrix is actually filled, either through the undertaking of model runs for the purposes of finite-difference derivatives calculation or through reading a model-produced external derivatives file. Under the former circumstances, a large number of model runs need to be undertaken before PEST ceases execution with an error message that MAXCOMPDIM needs to be set higher.\nIf PEST does indeed inform you that MAXCOMPDIM needs to be set higher, then the PEST control file must be edited accordingly and PEST re-started. Fortunately execution of PEST can then be re-commenced with the “/s” or “/d” switches (depending on whether it is being run in parallel or serial mode). Previous model runs are therefore not wasted.",
      "header": "15.4.2 The MAXCOMPDIM Control Variable",
      "level": 3,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "8c1f42813f75",
      "next_id": "73127b7a589f",
      "summary_self": "MAXCOMPDIM (integer, >1 in \"control data\" section, Figure 15.1) activates Jacobian matrix compression, potentially reducing memory usage but slowing inversion.  PEST prioritizes compressing the prior information submatrix; if MAXCOMPDIM is insufficient, it stops with an error message.  Restarting via `/s` or `/d` is possible after editing MAXCOMPDIM.",
      "summary_prev": "In highly parameterized inversions, Jacobian matrix storage (dimensions (no+np)×m) can be excessive.  Many sensitivities and Tikhonov regularization elements are often zero. A data storage mechanism that omits zero-valued elements significantly reduces PEST's memory requirements.",
      "summary_next": "DERZEROLIM (real, optional, after MAXCOMPDIM in \"control data\" section) sets a threshold for omitting near-zero finite-difference derivatives from compressed Jacobian storage (MAXCOMPDIM > 1). It filters numerical noise but does not affect externally calculated derivatives.",
      "header_level_1": "15. Large Numbers of Parameters",
      "header_level_2": "15.4 Compressed Internal Jacobian Storage",
      "header_summary_1": "This chapter discusses efficient calibration methods for models with tens of thousands of parameters using PEST. Adjoint techniques are recommended for highly parameterized models. Use compressed binary external derivatives files, 64-bit versions of PEST for large problems, and optimize Jacobian matrix storage. Prioritize linearity of regularization constraints and activate memory conservation for improved efficiency.",
      "header_summary_2": "In highly parameterized inversions, excessive Jacobian matrix storage can be reduced by omitting zero-valued elements. MAXCOMPDIM in PEST activates Jacobian matrix compression, prioritizing compressing the prior information submatrix. DERZEROLIM sets a threshold for omitting near-zero finite-difference derivatives, filtering numerical noise in compressed Jacobian storage.",
      "keywords": [
        "* control data",
        "BOUNDSCALE",
        "DERFORGIVE",
        "DOAUI",
        "DOSENREUSE",
        "DPOINT",
        "FACORIG",
        "FACPARMAX",
        "IBOUNDSTICK",
        "ICOR",
        "ICOV",
        "IEIG",
        "IRES",
        "JACFILE",
        "JACUPDATE",
        "JCOSAVE",
        "JCOSAVEITN",
        "LAMFORGIVE",
        "LASTRUN",
        "MAXCOMPDIM",
        "MESSFILE",
        "NINSFLE",
        "NOBS",
        "NOBSGP",
        "NOPTMAX",
        "NOPTSWITCH",
        "NPAR",
        "NPARGP",
        "NPHINORED",
        "NPHISTP",
        "NPRIOR",
        "NRELPAR",
        "NTPLFLE",
        "NUMCOM",
        "NUMLAM",
        "OBSREREF",
        "PARSAVEITN",
        "PARSAVERUN",
        "PESTMODE",
        "PHIABANDON",
        "PHIRATSUF",
        "PHIREDLAM",
        "PHIREDSTP",
        "PHIREDSWH",
        "PHISTOPTHRESH",
        "PRECIS",
        "REISAVEITN",
        "RELPARMAX",
        "RELPARSTP",
        "RLAMBDA1",
        "RLAMFAC",
        "RSTFLE",
        "SPLITSWH",
        "UPVECBEND",
        "VERBOSEREC"
      ],
      "similarity": 0.821747863940831,
      "normalized_semantic": 0.821747863940831,
      "normalized_keyword": 0,
      "combined_score": 0.24652435918224933
    },
    {
      "chunk_id": "73127b7a589f",
      "chunk_index": 1,
      "content": "A PEST variable named DERZEROLIM can optionally follow MAXCOMPDIM on the third line of the “control data” section of the PEST control file. This should be entered as a low number or zero. A finite-difference derivative is assumed to be zero (and hence not stored in the compressed Jacobian matrix) if its absolute value is less than this number. This allows numerical noise in finite-difference derivatives incurred, for example, by problematic simulator solver convergence, to be filtered out to at least some extent at the same time as it reduces Jacobian matrix storage requirements. Note that the DERZEROLIM threshold is not applied to externally-calculated derivatives; nor is it applied to finite-difference derivatives unless MAXCOMPDIM is greater than one, and hence compressed Jacobian storage is activated.",
      "header": "15.4.3 The DERZEROLIM Control Variable",
      "level": 3,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "43c6e8ea67dc",
      "next_id": "bc1acb013ea3",
      "summary_self": "DERZEROLIM (real, optional, after MAXCOMPDIM in \"control data\" section) sets a threshold for omitting near-zero finite-difference derivatives from compressed Jacobian storage (MAXCOMPDIM > 1). It filters numerical noise but does not affect externally calculated derivatives.",
      "summary_prev": "MAXCOMPDIM (integer, >1 in \"control data\" section, Figure 15.1) activates Jacobian matrix compression, potentially reducing memory usage but slowing inversion.  PEST prioritizes compressing the prior information submatrix; if MAXCOMPDIM is insufficient, it stops with an error message.  Restarting via `/s` or `/d` is possible after editing MAXCOMPDIM.",
      "summary_next": "Placing all \"regul\" group observations after other observations in the \"observation data\" section improves efficiency in PEST's regularization process when regularization constraints are supplied through observations.  PEST automatically detects and utilizes this arrangement.",
      "header_level_1": "15. Large Numbers of Parameters",
      "header_level_2": "15.4 Compressed Internal Jacobian Storage",
      "header_summary_1": "This chapter discusses efficient calibration methods for models with tens of thousands of parameters using PEST. Adjoint techniques are recommended for highly parameterized models. Use compressed binary external derivatives files, 64-bit versions of PEST for large problems, and optimize Jacobian matrix storage. Prioritize linearity of regularization constraints and activate memory conservation for improved efficiency.",
      "header_summary_2": "In highly parameterized inversions, excessive Jacobian matrix storage can be reduced by omitting zero-valued elements. MAXCOMPDIM in PEST activates Jacobian matrix compression, prioritizing compressing the prior information submatrix. DERZEROLIM sets a threshold for omitting near-zero finite-difference derivatives, filtering numerical noise in compressed Jacobian storage.",
      "keywords": [
        "MAXCOMPDIM"
      ],
      "similarity": 0.795348144409405,
      "normalized_semantic": 0.795348144409405,
      "normalized_keyword": 0,
      "combined_score": 0.23860444332282155
    },
    {
      "chunk_id": "26873b456a9c",
      "chunk_index": 1,
      "content": "NPAR\nThis is the total number of parameters featured in the current PEST case, including adjustable, fixed and tied parameters; NPAR must be supplied as an integer.\nNOBS\nThis integer variable represents the total number of observations featured in the current case. Note that, when counting the number of observations, dummy observations (see chapter 2) that may be featured in one or a number of instruction files are ignored.\nNPARGP\nThis is the number of parameter groups. Recall from the previous chapter that the variables which govern the operation of finite-difference derivatives are assigned to parameter groups. Parameter grouping can also be of importance where the ADDREG1 utility described in part II of this manual is employed to add preferred value Tikhonov regularisation to a PEST control file. NPARGP is an integer variable.\nNPRIOR\nNPRIOR, another integer variable, is the number of articles of prior information that are included in the parameter estimation process. If there are no articles of prior information, NPRIOR must be zero. If PEST is running in “estimation” mode, then you should ensure that the number of adjustable parameters is less than or equal to the number of observations for which there are non-zero weights plus the number of articles of prior information for which there are non-zero weights. If this is not the case, then the inverse problem cannot possibly have a unique solution. Furthermore, unless solution of this nonunique inverse problem is sought using singular value decomposition or LSQR, PEST may make little progress in lowering the objective function because the XtQX matrix appearing in equation 5.2.9 of Doherty (2015) will be singular and hence non-invertible. Sadly, nonuniqueness is the rule rather than the exception when calibrating environmental models. PEST is not troubled by parameter nonuniqueness if Tikhonov regularisation is introduced to the inverse problem, and if singular value decomposition or LSQR is used in solution of that problem. Because of the prevalence of nonuniqueness in environmental model calibration, this should be done as a matter of course. (The outnumbering of observations by parameters does not create a numerical problem if singular value decomposition or LSQR are used to solve the inverse problem, despite the noninvertability of XtQX.)\nNOBSGP\nNOBSGP, another integer variable, is the number of observation groups featured in the PEST control file. Each observation and each prior information equation must be assigned to an observation group (they can all be assigned to the same group if desired). When PEST evaluates the total objective function it also evaluates the contribution made to this total by each observation group.\nMAXCOMPDIM\nMAXCOMPDIM is an optional integer variable. It is used to activate compressed internal storage of the Jacobian matrix by PEST. This can slow PEST execution. At the same time it can allow PEST to undertake very highly parameterized inversion wherein adjustable parameters may number in the tens of thousands. This is further discussed in section 15.4.",
      "header": "4.2.4 Third Line",
      "level": 3,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "9b2451e25955",
      "next_id": "e611a7673cad",
      "summary_self": "NPAR (total parameters), NOBS (observations, excluding dummy), NPARGP (parameter groups), NPRIOR (prior information items), and NOBSGP (observation groups) are integer variables in the PEST control file.  In \"estimation\" mode, adjustable parameters should not exceed weighted observations plus prior information, unless using SVD or LSQR. MAXCOMPDIM (optional) activates compressed Jacobian matrix storage.",
      "summary_prev": "RSTFLE (\"restart\" or \"norestart\") enables PEST's restart capability (Appendix B). PESTMODE (\"estimation\", \"prediction\", \"regularisation\", or \"pareto\") selects the operational mode;  additional mode-specific sections may be included.",
      "summary_next": "DERZEROLIM (optional) defines a Jacobian matrix zero threshold for compressed storage. NTPLFLE is the number of template files; NINSFLE is the number of instruction files. PRECIS (\"single\" or \"double\") sets precision. DPOINT (\"point\" or \"nopoint\") controls decimal point inclusion. NUMCOM, JACFILE, MESSFILE (Chapter 12) handle model-calculated derivatives. OBSREREF (Chapter 14) activates observation re-referencing.",
      "header_level_1": "4. The PEST Control File",
      "header_level_2": "4.2 Control Data Section",
      "header_summary_1": "Figure 4.2 in PEST software displays control data section variables. The text details options for writing matrices, files, and parameters, including settings for matrix and file saving, operational modes, precision, derivative handling, and convergence criteria. Optional features like sensitivity reuse and LSQR algorithm for solving inverse problems are discussed.",
      "header_summary_2": "Figure 4.2 shows \"control data\" section variables (from Appendix A, Figure A1.1).  Some variables are discussed later. The first line must be \"* control data\";  some variables are optional (in brackets).",
      "keywords": [
        "MAXCOMPDIM",
        "NOBS",
        "NOBSGP",
        "NPAR",
        "NPARGP",
        "NPRIOR"
      ],
      "similarity": 0.770750270530599,
      "normalized_semantic": 0.770750270530599,
      "normalized_keyword": 0,
      "combined_score": 0.23122508115917972
    },
    {
      "chunk_id": "31964a4bdbf5",
      "chunk_index": 1,
      "content": "When estimating values for a large number of parameters (for example ten thousand or more parameters), the handling of prior information that may provide Tikhonov constraints for these parameters may become problematical if compressed Jacobian storage is employed (i.e. if the MAXCOMPDIM variable in the “control data” section of the PEST control file is set to greater than 1). As has already been discussed, the Jacobian submatrix which holds this prior information is likely to be sparse; hence considerable benefits are to be gained from storing it in compressed form. However storage and retrieval of items that are stored in compressed format requires calculations to be carried out which may increase the computational burden of the overall inversion process.\nConsiderable computational advantage can be gained if prior information is provided to PEST in the same order as that in which it is stored internally in the compressed Jacobian array. Elements of the compressed Jacobian matrix are stored in row order, with zero-valued elements excluded. That is, elements are stored in the order J(i,j), J(i+1,j), J(i+2,j) etc., with the jump made to column j+1 when all non-zero values in column j have been stored. The row number is the observation (including prior information) number (i in this example), while the parameter number is the column number (j in this example).\nIn the “prior information” section of the PEST control file, the user supplies prior information in the form of equations. If more than one parameter is cited in any of these equations, the above ordering is not respected. Where many prior information equations are supplied in order to provide regularisation constraints for many estimated parameters, PEST may require a considerable amount of time to read and store this prior information when compressed Jacobian matrix storage is employed.\nIn order to overcome this problem, PEST provides an alternative means through which prior information can be supplied. This is referred to as “indexed prior information” herein.\nPEST is informed that prior information is provided in indexed form in the “prior information” section of the PEST control file if the NPRIOR variable in the “control data” section of the PEST control file is supplied as negative. As usual, the absolute value of NPRIOR must indicate the number of prior information equations that are featured in the\ncurrent inverse problem.\nWhen the indexed prior information protocol is adopted, the “prior information” section of the PEST control file is subdivided into two sections. There are no headers between these subsections. The first subsection should contain NPRIOR lines of data. Each line of this subsection must contain four entries. These are as follows.\n- The name of the prior information equation (12 characters or less without quotes or blanks); this is the PILBL variable.\n- The “observed value” of the prior information equation (a real number); this is the PIVAL variable.\n- The weight associated with the prior information equation (a real number); this is the WEIGHT variable.\n- The observation group to which the prior information equation belongs (12 characters or less citing a group that has already been named in the “observation groups” section of the PEST control file); this is the OBGNME variable.\nPart of this subsection of the “prior information” section is exemplified in figure 15.5.\n* prior information\npr_r1      0.0     1.0 regul_row\npr_r2      0.0     1.0 regul_row\npr_r3      0.0     1.0 regul_row\npr_r4      0.0     1.0 regul_row\npr_r5      0.0     1.0 regul_row\npr_r6      0.0     1.0 regul_row\npr_r7      0.0     1.0 regul_row\npr_r8      0.0     1.0 regul_row\npr_r9      0.0     1.0 regul_row\npr_r10 0.0         1.0 regul_row\npr_r11 0.0         1.0 regul_row\npr_r12 0.0         1.0 regul_row\npr_r13 0.0         1.0 regul_row\npr_r14 0.0         1.0 regul_row\npr_r15 0.0         1.0 regul_row\netc\nFigure 15.5 Part of the first subsection of the “prior information” section of a PEST control file in which prior information is supplied in indexed format.\nFollowing NPRIOR items supplied as above is the second subsection of the “prior information” section of the PEST control file. This subsection begins with a line containing a single integer, this specifying the number of lines to follow. This integer must equal or exceed NPRIOR; it will be referred to as NUMINDEX herein.\nEach of the following NUMINDEX lines must contain three entries. These are, in order:\n- a column number of the Jacobian matrix (an integer);\n- a row number of the Jacobian matrix (an integer);\n- the value of the element of the Jacobian matrix corresponding to the nominated row and column numbers.\nA Jacobian matrix column number is obtained by counting parameters in order of their appearance in the “parameter data” section of the PEST control file; fixed and tied parameters are omitted from this count. A row number is obtained by counting first observations, and then prior information equations, in order of their appearance in the PEST control file. For prior information equations, the row number must exceed NOBS (where NOBS is the number of observations featured in the PEST control file), and must be less than or equal to\nNOBS+NPRIOR. It is the user’s task to calculate these indices him/herself; normally a PEST control file which features indexed prior information will be written by utility software which undertakes these calculations as part of its processing services.",
      "header": "15.8 Accelerated Input of Prior Information",
      "level": 2,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "c0a006bd61b4",
      "next_id": "8f648caef927",
      "summary_self": "For highly parameterized models with compressed Jacobian storage (MAXCOMPDIM > 1), using indexed prior information improves efficiency.  A negative NPRIOR value in the \"control data\" section activates this. The \"prior information\" section then lists PILBL, PIVAL, WEIGHT, OBGNME per equation, followed by NUMINDEX lines (≥NPRIOR) specifying Jacobian matrix indices (column, row, value) for non-zero elements.",
      "summary_prev": "MEMSAVE (\"memsave\" or \"nomemsave\", Figure 15.4, after FRACPHIM or PHIMACCEPT in the \"regularisation\" section) activates memory conservation.  \"memsave\" sets ICOV, ICOR, and IEIG to 0 (disabling covariance matrix calculations and case.mtt files) and LINREG to \"nonlinreg\", potentially increasing runtime.",
      "summary_next": "For indexed prior information (NPRIOR<0), the \"prior information\" section lists PILBL, PIVAL, WEIGHT, OBGNME per equation, followed by NUMINDEX lines specifying Jacobian matrix indices (column, row, value) for non-zero elements.  Faster compressed storage requires that the observation number varies most quickly and parameter numbers never decrease.  The value represents the parameter's factor in the equation.",
      "header_level_1": "15. Large Numbers of Parameters",
      "header_level_2": "",
      "header_summary_1": "This chapter discusses efficient calibration methods for models with tens of thousands of parameters using PEST. Adjoint techniques are recommended for highly parameterized models. Use compressed binary external derivatives files, 64-bit versions of PEST for large problems, and optimize Jacobian matrix storage. Prioritize linearity of regularization constraints and activate memory conservation for improved efficiency.",
      "header_summary_2": "",
      "keywords": [
        "* prior information",
        "MAXCOMPDIM",
        "NOBS",
        "NPRIOR",
        "OBGNME",
        "PILBL",
        "PIVAL"
      ],
      "similarity": 0.761626317404133,
      "normalized_semantic": 0.761626317404133,
      "normalized_keyword": 0,
      "combined_score": 0.22848789522123994
    },
    {
      "chunk_id": "e611a7673cad",
      "chunk_index": 1,
      "content": "DERZEROLIM\nLike MAXCOMPDIM, DERZEROLIM is optional. If supplied, it supports the use of MAXCOMPDIM, defining a threshold below which the value of an element of the Jacobian matrix can be considered to be zero, and hence omitted from compressed storage.\nNTPLFLE\nThis is an integer variable, informing PEST of the number of model input files which contain parameters; PEST must write each of these files prior to a model run. As there must be one template file for each such model input file, NTPLFLE is also equal to the number of template files which PEST must use in writing the current parameter set. A model may have many input files; however PEST is concerned only with those which it needs to rewrite prior to each model run, i.e. those for which there are template files. As explained later, a single template file may, under some circumstances, be used to write more than one model input file. In such a case you must count each template file - model input file pair separately in determining NTPLFLE.\nNINSFLE\nThis is the number of instruction files. There must be one instruction file for each model output file containing model-generated observations which PEST reads. (In some circumstances, a single model output file may be read by more than one instruction file; however each instruction file - model output file pair is counted separately in determining NINSFLE).\nPRECIS\nPRECIS is a character variable which must be either “single” or “double”. If it is supplied to PEST as “single”, PEST writes parameters to model input files using single precision protocol; hence parameter values will never be greater than 13 characters in length (even if the parameter space allows for a greater length) and the exponentiation character is “e”. If PRECIS is supplied as “double”, parameter values are written to model input files using double precision protocol; the maximum parameter value length is 23 characters and the exponentiation symbol is “d”. See section 2.2.6.\nDPOINT\nThis character variable must be either “point” or “nopoint”. If DPOINT is provided with the value “nopoint” PEST will omit the decimal point from representations of parameter values on model input files if the decimal point is redundant, thus making room for the use of one extra significant figure. If DPOINT is supplied as “point” (which is normally recommended), PEST will ensure that the decimal point is always present. See section 2.2.6.\nNUMCOM, JACFILE and MESSFILE\nThese variables are used to control the manner in which PEST can obtain derivatives directly from the model if these are available; see chapter 12. For normal operation these should be set to 1, 0 and 0 respectively. Alternatively, all of them can be omitted. However if one of\nthem is cited in the PEST control file then all of them must be cited. Also if a value is supplied for NUMCOM, then a DERCOM value must be supplied for all parameters in the “parameter data” section of the PEST control file; If NUMCOM is 1, then all of these DERCOMs must also be 1.\nOBSREREF\nObservation re-referencing is activated by adding the string “obsreref” to the fourth line of the “control data” section of the PEST control file. The “obsreref” string can be placed anywhere on this line. Observation re-referencing can be de-activated (the default condition) by omitting this string, or by placing the string “noobsreref” on this line. Observation re-referencing is discussed in chapter 14 of this manual.",
      "header": "4.2.5 Fourth Line",
      "level": 3,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "26873b456a9c",
      "next_id": "9b975b5255bb",
      "summary_self": "DERZEROLIM (optional) defines a Jacobian matrix zero threshold for compressed storage. NTPLFLE is the number of template files; NINSFLE is the number of instruction files. PRECIS (\"single\" or \"double\") sets precision. DPOINT (\"point\" or \"nopoint\") controls decimal point inclusion. NUMCOM, JACFILE, MESSFILE (Chapter 12) handle model-calculated derivatives. OBSREREF (Chapter 14) activates observation re-referencing.",
      "summary_prev": "NPAR (total parameters), NOBS (observations, excluding dummy), NPARGP (parameter groups), NPRIOR (prior information items), and NOBSGP (observation groups) are integer variables in the PEST control file.  In \"estimation\" mode, adjustable parameters should not exceed weighted observations plus prior information, unless using SVD or LSQR. MAXCOMPDIM (optional) activates compressed Jacobian matrix storage.",
      "summary_next": "RLAMBDA1 (initial Marquardt lambda, ~10.0) and RLAMFAC (Marquardt lambda adjustment factor, ~2.0 or -3.0) control lambda adjustments during iterations.  PHIRATSUF (objective function reduction ratio, ~0.3) determines iteration completion; if not met, PHIREDLAM is used.",
      "header_level_1": "4. The PEST Control File",
      "header_level_2": "4.2 Control Data Section",
      "header_summary_1": "Figure 4.2 in PEST software displays control data section variables. The text details options for writing matrices, files, and parameters, including settings for matrix and file saving, operational modes, precision, derivative handling, and convergence criteria. Optional features like sensitivity reuse and LSQR algorithm for solving inverse problems are discussed.",
      "header_summary_2": "Figure 4.2 shows \"control data\" section variables (from Appendix A, Figure A1.1).  Some variables are discussed later. The first line must be \"* control data\";  some variables are optional (in brackets).",
      "keywords": [
        "DERCOM",
        "DPOINT",
        "JACFILE",
        "MAXCOMPDIM",
        "MESSFILE",
        "NINSFLE",
        "NTPLFLE",
        "NUMCOM",
        "OBSREREF",
        "PRECIS"
      ],
      "similarity": 0.754435331158083,
      "normalized_semantic": 0.754435331158083,
      "normalized_keyword": 0,
      "combined_score": 0.22633059934742494
    },
    {
      "chunk_id": "626d16643148",
      "chunk_index": 1,
      "content": "ICOV, ICOR and IEIG\nIf PEST is run in “estimation” mode, and if neither singular value decomposition nor LSQR is employed in solution of the inverse problem, then at the end of each iteration of the inversion process PEST can write a “matrix file” containing linear estimates of the posterior covariance and correlation coefficient matrices, as well as eigenvectors and eigenvalues of the posterior covariance matrix. Calculation of these matrices is based on the current Jacobian matrix. Settings of the ICOV, ICOR and IEIG variables determine which (if any) of these data are recorded in the matrix file. A setting of 1 for each of these variables will result in the corresponding information being recorded. On the other hand, a setting of 0 will result in the corresponding information not being recorded. Regardless of these settings, all of these matrices are recorded on the run record file at the end of the inversion process (provided, once again, that PEST is not run in “regularisation” mode and that neither singular value decomposition nor LSQR is used to solve the inverse problem.)\nThe posterior covariance matrix, together with its correlation coefficients and eigenvectors/eigenvalues, can be used to examine the “health” of an inverse problem in which regularisation is purely manual and therefore implied in the definition of the parameters themselves. This covariance matrix is computed using equation 5.2.13 of Doherty (2015). Note, however, that these matrices cannot be computed if an inverse problem is completely ill-posed.\nA better way to compute a posterior covariance matrix is to use the PREDUNC7 utility; this is not troubled by problem ill-posedness. Other linear parameter and predictive uncertainty analysis possibilities are available through utilities discussed in part II of this manual. Furthermore, with mathematical regularisation in place, the information provided by eigenvector decomposition of the posterior covariance matrix, and by parameter correlation coefficients computed from this matrix, is not really needed, for the mathematical regularisation process, instead of the user, takes care of possible inverse problem ill-posedness. See Doherty (2015) for details.\nIRES\nThis is an integer variable which controls the writing of a “resolution data file”. This is a binary file which is used by utilities such as RESPROC, RESWRIT and PARAMERR which compute the resolution matrix, and quantify post-calibration predictive error variance. The resolution data file is automatically named case.rsd, where case is the filename base of the PEST control file.\nIf omitted, IRES is set to 1. Writing of a resolution data file can therefore only be prevented if IRES is included in the PEST control file and specifically set to 0. This is its recommended setting, as the utility programs which use it are less informative than more recent programs such as those comprising the PREDVAR* and PREDUNC* suites which have superseded them; the latter programs do not read a resolution data file.\nJCOSAVE\nThis optional text variable can be used to suppress recording of the binary Jacobian matrix file (i.e. JCO file). If supplied, it must be provided as “jcosave” or “nojcosave”. If omitted,\n“jcosave” prevails. This variable can be placed anywhere following the mandatory IEIG or optional IRES variable on the ninth line of the “control data” section of the PEST control file. Its recommended value is “jcosave”, unless the inverse problem size is very large indeed and the MAXCOMPDIM variable has been employed to activate internal compressed Jacobian matrix storage; in the latter case the accessing of a large Jacobian matrix for the purpose of recording a JCO file can be computationally intensive.\nJCOSAVEITN\nJCOSAVEITN is an optional character variable which should be supplied as either “jcosaveitn” or “nojcosaveitn”. If the former string is supplied, PEST writes a JCO file at the end of every iteration, this containing the Jacobian matrix calculated during that iteration. The name of each such file is case.jco.N where N is the iteration number to which the JCO file pertains. Alternatively, if JCOSAVEITN is set to “nojcosaveitn”, or omitted altogether, PEST will not save a progression of JCO files in this manner. Note that the JCO file containing the Jacobian matrix corresponding to the best parameter set attained so far is saved to a file named case.jco in the usual manner, regardless of the setting of JCOSAVEITN. The JCOSAVEITN variable can be placed anywhere on the ninth line of the “control data” section of the PEST control file following ICOV, ICOR, IEIG and, optionally, IRES. JCOSAVEITN should be set to “jcosaveitn” if it is desired that the MULJCOSEN utility be employed for monitoring of changes to composite parameter and/or observation sensitivities during the inversion process. See part II of this manual for a description of this utility.\nVERBOSEREC\nWhere parameter, observation and prior information numbers are high, the PEST run record file becomes voluminous - so voluminous that it is almost impossible for a user to obtain useful information from it. PEST will write a much shorter run record file if VERBOSEREC (a text variable) is set to “noverboserec”. The default value for this variable (i.e. the value that will prevail if it is not supplied at all) is “verboserec”. The VERBOSEREC variable can be placed anywhere following ICOV, ICOR, IEIG and, optionally, IRES on the ninth line of the “control data” section of the PEST control file.\nREISAVEITN",
      "header": "4.2.10 Ninth Line",
      "level": 3,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "421e7b0896aa",
      "next_id": "70b3867d696b",
      "summary_self": "ICOV, ICOR, IEIG (0 or 1) control writing of covariance, correlation, and eigenvector matrices to a matrix file. IRES (0 or 1) controls writing of a resolution data file (case.rsd). JCOSAVE (\"jcosave\" or \"nojcosave\") controls Jacobian matrix file (case.jco) saving. JCOSAVEITN (\"jcosaveitn\" or \"nojcosaveitn\") saves a JCO file for each iteration. VERBOSEREC (\"verboserec\" or \"noverboserec\") controls run record file verbosity.",
      "summary_prev": "PHISTOPTHRESH, PHIABANDON, and LASTRUN control null space Monte Carlo.  PHIABANDON (high value or file) stops calibration if the objective function is too high; LASTRUN (0 or 1) controls the final model run.  A PHIABANDON schedule file provides iteration-specific thresholds.  If the objective function exceeds the threshold, the parameter adjustment process is abandoned.",
      "summary_next": "REISAVEITN (\"reisaveitn\" or \"noreisaveitn\") controls saving interim residuals files (case.rei, case.rei.N). PARSAVEITN (\"parsaveitn\" or \"noparsaveitn\") saves parameter values (case.par.N) per iteration. PARSAVERUN (\"parsaverun\" or \"noparsaverun\") saves run-specific parameter values (BEOPEST only, case.par.N_M).  An optional \"sensitivity reuse\" section (Chapter 7) governs sensitivity reuse.  An optional \"singular value decomposition\" section is recommended for most applications.",
      "header_level_1": "4. The PEST Control File",
      "header_level_2": "4.2 Control Data Section",
      "header_summary_1": "Figure 4.2 in PEST software displays control data section variables. The text details options for writing matrices, files, and parameters, including settings for matrix and file saving, operational modes, precision, derivative handling, and convergence criteria. Optional features like sensitivity reuse and LSQR algorithm for solving inverse problems are discussed.",
      "header_summary_2": "Figure 4.2 shows \"control data\" section variables (from Appendix A, Figure A1.1).  Some variables are discussed later. The first line must be \"* control data\";  some variables are optional (in brackets).",
      "keywords": [
        "ICOR",
        "ICOV",
        "IEIG",
        "IRES",
        "JCOSAVE",
        "JCOSAVEITN",
        "MAXCOMPDIM",
        "REISAVEITN",
        "VERBOSEREC"
      ],
      "similarity": 0.73918935785421,
      "normalized_semantic": 0.73918935785421,
      "normalized_keyword": 0,
      "combined_score": 0.22175680735626305
    },
    {
      "chunk_id": "ec06f012104f",
      "chunk_index": 3,
      "content": "| NPAR           | integer      | greater than zero                                          | number of parameters                                                                                                            |\n| NOBS           | integer      | greater than zero                                          | number of observations                                                                                                          |\n| NPARGP         | integer      | greater than zero                                          | number of parameter groups                                                                                                      |\n| NPRIOR         | integer      | any integer value                                          | absolute value is number of prior information equations; negative value indicates supply of prior information in indexed format |\n| NOBSGP         | integer      | greater than zero                                          | number of observation groups                                                                                                    |\n| MAXCOMPDIM     | integer      | zero or greater                                            | number of elements in compressed Jacobian matrix                                                                                |\n| NTPLFLE        | integer      | greater than zero                                          | number of template files                                                                                                        |\n| NINSFLE        | integer      | greater than zero                                          | number of instruction files                                                                                                     |\n| PRECIS         | text         | “single” or “double”                                       | format for writing parameter values to model input files                                                                        |\n| DPOINT         | text         | “point” or “nopoint”                                       | omit decimal point in parameter values if possible                                                                              |\n| NUMCOM         | integer      | greater than zero                                          | number of command lines used to run model                                                                                       |\n| JACFILE        | integer      | 0, 1 or -1                                                 | indicates whether model provides external derivatives file                                                                      |\n| MESSFILE       | integer      | zero or one                                                | indicates whether PEST writes PEST-to-model message file                                                                        |\n| OBSREREF       | text         | “obsreref”, “obsreref_N” or “noobsreref”                   | activates or de-activates observation re-referencing (with an optional pause after re-referencing runs)                         |\n| RLAMBDA1       | real         | zero or greater                                            | initial Marquardt lambda                                                                                                        |\n| RLAMFAC        | real         | positive or negative, but not zero                         | dictates Marquardt lambda adjustment process                                                                                    |\n| PHIRATSUF      | real         | between zero and one                                       | fractional objective function sufficient for end of current iteration                                                           |\n| PHIREDLAM      | real         | between zero and one                                       | termination criterion for Marquardt lambda search                                                                               |\n| NUMLAM         | integer      | one or greater; possibly negative with Parallel or BEOPEST | maximum number of Marquardt lambdas to test                                                                                     |\n| JACUPDATE      | integer      | zero or greater                                            | activation of Broyden’s Jacobian update procedure                                                                               |\n| LAMFORGIVE     | text         | “lamforgive” or “nolamforgive”                             | treat model run failure during lambda search as high objective function                                                         |\n| DERFORGIVE     | text         | “derforgive” or “noderforgive”                             | accommodates model failure during Jacobian runs by setting pertinent sensitivities to zero                                      |\n| RELPARMAX      | real         | greater than zero                                          | parameter relative change limit                                                                                                 |\n| FACPARMAX      | real         | greater than one                                           | parameter factor change limit                                                                                                   |\n| FACORIG        | real         | between zero and one                                       | minimum fraction of original parameter value in evaluating relative change                                                      |\n| ABSPARMAX(*N*) | real         | greater than zero                                          | parameter absolute change limit – *N’*th instance                                                                               |\n| IBOUNDSTICK    | integer      | zero or greater                                            | instructs PEST not to compute derivatives for parameter at its bounds                                                           |\n| UPVECBEND      | integer      | zero or one                                                | instructs PEST to bend parameter upgrade vector if parameter hits bounds                                                        |\n| PHIREDSWH      | real         | between zero and one                                       | sets objective function change for introduction of central derivatives                                                          |\n| NOPTSWITCH     | integer      | one or greater                                             | iteration before which PEST will not switch to central derivatives computation                                                  |\n| SPLITSWH       | real         | zero or greater                                            | the factor by which the objective function rises to invoke split slope derivatives analysis until end of run                    |\n| DOAUI          | text         | “aui”, “auid”, or “noaui”                                  | instructs PEST to implement automatic user intervention                                                                         |\n| DOSENREUSE     | text         | “senreuse” or “nosenreuse”                                 | instructs PEST to reuse parameter sensitivities                                                                                 |\n| BOUNDSCALE     | text         | “boundscale” or “noboundscale”                             | parameters are scaled by the inter-bounds interval if using singular value decomposition, LSQR or SVDA                          |\n| NOPTMAX        | integer      | -2, -1, 0, or any number greater than zero                 | number of optimization iterations                                                                                               |\n| PHIREDSTP      | real         | greater than zero                                          | relative objective function reduction triggering termination                                                                    |\n| NPHISTP        | integer      | greater than zero                                          | number of successive iterations over which PHIREDSTP applies                                                                    |\n| NPHINORED      | integer      | greater than zero                                          | number of iterations since last drop in objective function to trigger termination                                               |\n| RELPARSTP      | real         | greater than zero                                          | maximum relative parameter change triggering termination                                                                        |\n| NRELPAR        | integer      | greater than zero                                          | number of successive iterations over which RELPARSTP applies                                                                    |\n| PHISTOPTHRESH  | real         | zero or greater                                            | objective function threshold triggering termination                                                                             |\n| LASTRUN        | integer      | zero or one                                                | instructs PEST to undertake (or not) final model run with best parameters                                                       |\n| PHIABANDON     | real or text | a positive number or name of a file                        | objective function value at which to abandon optimization process or filename containing abandonment schedule                   |\n| ICOV           | integer      | zero or one                                                | record covariance matrix in matrix file                                                                                         |\n| ICOR           | integer      | zero or one                                                | record correlation coefficient matrix in matrix file                                                                            |\n| IEIG           | integer      | zero or one                                                | record eigenvectors in matrix file                                                                                              |\n| IRES           | integer      | zero or one                                                | record resolution data                                                                                                          |\n| JCOSAVE        | text         | “jcosave” or “nojcosave”                                   | save best Jacobian file as a JCO file - overwriting previously saved files of the same name as the inversion process progresses |",
      "header": "14. References",
      "level": 1,
      "file_name": "PEST Model-Independent Parameter Estimation: PEST++ a Software Suite for Parameter Estimation, Uncertainty Analysis, Management Optimization and Sensitivity Analysis",
      "prev_id": "36260bc07205",
      "next_id": "29df72298597",
      "summary_self": "These are the control variables in the \"control data\" section.  All are optional with defaults;  some are used only by PEST.  PEST++ uses \"++\" prefixed keywords.  Integer variables (except NPRIOR) must be >0.  Real variables have specific ranges.  The latest variables are on the PEST++ website.  Parallel run variables (section 5.3.6) are not included.",
      "summary_prev": "This appendix specifies the PEST control file format (Figure A1.1).  Variables are position-based, space/tab-delimited; strings with spaces are quoted.  Blank lines and comments (#) are allowed (PEST versions ≥15).  Optional variables are in brackets.  PEST++ uses \"++\" prefixed keywords; PEST ignores these.  The first line is \"pcf\".",
      "summary_next": "This appendix details PEST control file variables (Figures A1.1, A1.2-A1.7).  All PEST++ variables are \"++\" prefixed keywords.  Variable types (integer, real, text) and values are specified.  Some variables are optional (with defaults).  Some sections/variables are ignored by PEST++.  Parameter group variables control finite-difference derivative calculations (section 3.3).",
      "header_level_1": "",
      "header_level_2": "",
      "header_summary_1": "",
      "header_summary_2": "",
      "keywords": [
        "BOUNDSCALE",
        "DERFORGIVE",
        "DOAUI",
        "DOSENREUSE",
        "DPOINT",
        "FACORIG",
        "FACPARMAX",
        "IBOUNDSTICK",
        "ICOR",
        "ICOV",
        "IEIG",
        "IRES",
        "JACFILE",
        "JACUPDATE",
        "JCOSAVE",
        "LAMFORGIVE",
        "LASTRUN",
        "MAXCOMPDIM",
        "MESSFILE",
        "NINSFLE",
        "NOBS",
        "NOBSGP",
        "NOPTMAX",
        "NOPTSWITCH",
        "NPAR",
        "NPARGP",
        "NPHINORED",
        "NPHISTP",
        "NPRIOR",
        "NRELPAR",
        "NTPLFLE",
        "NUMCOM",
        "NUMLAM",
        "OBSREREF",
        "PHIABANDON",
        "PHIRATSUF",
        "PHIREDLAM",
        "PHIREDSTP",
        "PHIREDSWH",
        "PHISTOPTHRESH",
        "PRECIS",
        "RELPARMAX",
        "RELPARSTP",
        "RLAMBDA1",
        "RLAMFAC",
        "SPLITSWH",
        "UPVECBEND",
        "lambdas"
      ],
      "similarity": 0.720601141452789,
      "normalized_semantic": 0.720601141452789,
      "normalized_keyword": 0,
      "combined_score": 0.21618034243583673
    },
    {
      "chunk_id": "093533cf8535",
      "chunk_index": 1,
      "content": "4.2.1 General\nVariables appearing in the “control data” section of the PEST control file are shown in figure 4.2 (which is reproduced from figure A1.1 of appendix A). These will now be discussed line by line. However discussion of some optional variables will be left until later sections of this manual where a broader discussion of the capabilities to which they pertain will be presented.\n* control data\nRSTFLE PESTMODE\nNPAR NOBS NPARGP NPRIOR NOBSGP [MAXCOMPDIM] [DERZEROLIM]\nNTPLFLE NINSFLE PRECIS DPOINT [NUMCOM JACFILE MESSFILE] [OBSREREF]\nRLAMBDA1 RLAMFAC PHIRATSUF PHIREDLAM NUMLAM [JACUPDATE] [LAMFORGIVE] [DERFORGIVE]\nRELPARMAX FACPARMAX FACORIG [IBOUNDSTICK UPVECBEND] [ABSPARMAX]\nPHIREDSWH [NOPTSWITCH] [SPLITSWH] [DOAUI] [DOSENREUSE] [BOUNDSCALE]\nNOPTMAX PHIREDSTP NPHISTP NPHINORED RELPARSTP NRELPAR [PHISTOPTHRESH] [LASTRUN] [PHIABANDON]\nICOV ICOR IEIG [IRES] [JCOSAVE] [VERBOSEREC] [JCOSAVEITN] [REISAVEITN] [PARSAVEITN] [PARSAVERUN]\nFigure 4.2 Variables in the “control data” section of a PEST control file.\n4.2.2 First Line\nThe first line of the “control data” section of the PEST control file must contain the string “* control data”. Note that the “*” character is followed by a space.",
      "header": "4.2 Control Data Section",
      "level": 2,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "5274747d7796",
      "next_id": "9b2451e25955",
      "summary_self": "Figure 4.2 shows \"control data\" section variables (from Appendix A, Figure A1.1).  Some variables are discussed later. The first line must be \"* control data\";  some variables are optional (in brackets).",
      "summary_prev": "This PEST control file (Figure 4.1) includes control data, parameter groups (ro, h), parameter data (ro1, ro2, ro3, h1, h2), observation groups (obsgp1, obsgp2, prgp1), observation data, model command line, model input/output, and prior information.  Blank lines, comments (#), and \"++\" lines are allowed (except in older utilities; use PSTCLEAN to remove them).",
      "summary_next": "RSTFLE (\"restart\" or \"norestart\") enables PEST's restart capability (Appendix B). PESTMODE (\"estimation\", \"prediction\", \"regularisation\", or \"pareto\") selects the operational mode;  additional mode-specific sections may be included.",
      "header_level_1": "4. The PEST Control File",
      "header_level_2": "",
      "header_summary_1": "Figure 4.2 in PEST software displays control data section variables. The text details options for writing matrices, files, and parameters, including settings for matrix and file saving, operational modes, precision, derivative handling, and convergence criteria. Optional features like sensitivity reuse and LSQR algorithm for solving inverse problems are discussed.",
      "header_summary_2": "",
      "keywords": [
        "* control data",
        "BOUNDSCALE",
        "DERFORGIVE",
        "DOAUI",
        "DOSENREUSE",
        "DPOINT",
        "FACORIG",
        "FACPARMAX",
        "IBOUNDSTICK",
        "ICOR",
        "ICOV",
        "IEIG",
        "IRES",
        "JACFILE",
        "JACUPDATE",
        "JCOSAVE",
        "JCOSAVEITN",
        "LAMFORGIVE",
        "LASTRUN",
        "MAXCOMPDIM",
        "MESSFILE",
        "NINSFLE",
        "NOBS",
        "NOBSGP",
        "NOPTMAX",
        "NOPTSWITCH",
        "NPAR",
        "NPARGP",
        "NPHINORED",
        "NPHISTP",
        "NPRIOR",
        "NRELPAR",
        "NTPLFLE",
        "NUMCOM",
        "NUMLAM",
        "OBSREREF",
        "PARSAVEITN",
        "PARSAVERUN",
        "PESTMODE",
        "PHIABANDON",
        "PHIRATSUF",
        "PHIREDLAM",
        "PHIREDSTP",
        "PHIREDSWH",
        "PHISTOPTHRESH",
        "PRECIS",
        "REISAVEITN",
        "RELPARMAX",
        "RELPARSTP",
        "RLAMBDA1",
        "RLAMFAC",
        "RSTFLE",
        "SPLITSWH",
        "UPVECBEND",
        "VERBOSEREC"
      ],
      "similarity": 0.714280928883668,
      "normalized_semantic": 0.714280928883668,
      "normalized_keyword": 0,
      "combined_score": 0.21428427866510044
    },
    {
      "chunk_id": "36260bc07205",
      "chunk_index": 2,
      "content": "Wagner, B.J. and Gorelick, S.M., 1987. Optimal groundwater quality management under parameter uncertainty. *Water. Resour. Res.* 23(7), 1162-1174.\nWelter, D.E., Doherty, J.E., Hunt, R.J., Muffels, C.T., Tonkin, M.J., and Schreüder, W.A., 2012. Approaches in highly parameterized inversion - PEST++, a Parameter ESTimation code optimized for large environmental models: U.S. Geological Survey Techniques and Methods, book 7, section C5, 47 p., available at .\nWelter, D.E., White, J.T., Hunt, R.J., and Doherty, J.E., 2015. [Approaches in highly parameterized inversion: PEST++ Version 3, a Parameter ESTimation and uncertainty analysis software suite optimized for large environmental models](https://pubs.er.usgs.gov/publication/tm7C12). U.S. Geological Survey Techniques and Methods, book 7, section C12, 54 p.\nWhite, J.T., 2018. A model-independent iterative ensemble smoother for efficient history-matching and uncertainty quantification in very high dimensions. Accepted for publication in *Environmental Modelling and Software*.\nWhite, J.T., Fienen, M.N., Barlow, P.M. and Welter, D.E., 2018. A tool for efficient, model-independent management optimization under uncertainty. *Environmental Modelling and Software*, 100, 213-221.\nWhite, J.T., Fienen, M.N. and Doherty, J.E., 2016. A Python framework for environmental model uncertainty analysis. *Environmental Modelling and Software*, 85, 217-228.\nWhite, J.T., Doherty, J.E. and Hughes, J.D., 2014. Quantifying the predictive consequences of model error with linear subspace analysis. *Water Resour. Res*. 50 (2): 1152-1173. DOI: 10.1002/2013WR014767\nZhang, J., Lin, G., Li, W., Wu, L., & Zeng, L. (2018). An iterative local updating ensemble smoother for estimation and uncertainty assessment of hydrologic model parameters with multimodal distributions. *Water Resources Research*, 54, 1716– 1733.\n**Appendix**\nThis appendix provides specifications for a PEST control file.\nVariables are recognized by their position in the file. They must be placed on the correct line of this file and separated from their neighbours by at least one space.\nPEST, BEOPEST and many of the PEST-support utility programs which are documented in part II of the PEST manual tolerate the presence of the following items in a PEST control file:\n- blank lines;\n- comments;\n- lines that begin with the character string “++”.\nLines that begin with “++” are used for the insertion of variables which control the operation of the PEST++ suite of programs.\nComments can be placed on their own line. Alternatively, they can be placed at the end of a line which provides PEST control data. In either case, a comment follows a “#” character. Note, however, that this character is not construed as denoting the presence of an ensuing comment under any of the following circumstances:\n- it is not preceded by a space, tab or the beginning of a line;\n- it is part of a string that is enclosed in quotes.\nThese exceptions preclude mis-construing the presence of the “#” character in a filename as signifying the start of a comment.\nSome of the older utilities that are documented in part II of the PEST manual do not tolerate the presence of blank lines, “++” lines or comments. All of these items can be removed from a PEST control file using the PSTCLEAN utility supplied with the PEST suite.\nFigure A1.1 Names and locations of variables in the PEST control file. Optional variables are enclosed in square brackets.\npcf\n\\* control data\nRSTFLE PESTMODE\nNPAR NOBS NPARGP NPRIOR NOBSGP \\[MAXCOMPDIM\\]\\[DERZEROLIM\\]\nNTPLFLE NINSFLE PRECIS DPOINT \\[NUMCOM JACFILE MESSFILE\\] \\[OBSREREF\\]\nRLAMBDA1 RLAMFAC PHIRATSUF PHIREDLAM NUMLAM \\[JACUPDATE\\] \\[LAMFORGIVE\\] \\[DERFORGIVE\\]\nRELPARMAX FACPARMAX FACORIG \\[IBOUNDSTICK UPVECBEND\\] \\[ABSPARMAX\\]\nPHIREDSWH \\[NOPTSWITCH\\] \\[SPLITSWH\\] \\[DOAUI\\] \\[DOSENREUSE\\] \\[BOUNDSCALE\\]\nNOPTMAX PHIREDSTP NPHISTP NPHINORED RELPARSTP NRELPAR \\[PHISTOPTHRESH\\] \\[LASTRUN\\] \\[PHIABANDON\\]\nICOV ICOR IEIG \\[IRES\\] \\[JCOSAVE\\] \\[VERBOSEREC\\] \\[JCOSAVEITN\\] \\[REISAVEITN\\] \\[PARSAVEITN\\] \\[PARSAVERUN\\]\n\\* sensitivity reuse\nSENRELTHRESH SENMAXREUSE\nSENALLCALCINT SENPREDWEIGHT SENPIEXCLUDE\n\\* singular value decomposition\nSVDMODE\nMAXSING EIGTHRESH\nEIGWRITE\n\\* lsqr\nLSQRMODE\nLSQR_ATOL LSQR_BTOL LSQR_CONLIM LSQR_ITNLIM\nLSQRWRITE\n\\* automatic user intervention\nMAXAUI AUISTARTOPT NOAUIPHIRAT AUIRESTITN\nAUISENSRAT AUIHOLDMAXCHG AUINUMFREE\nAUIPHIRATSUF AUIPHIRATACCEPT NAUINOACCEPT\n\\* svd assist\nBASEPESTFILE\nBASEJACFILE\nSVDA_MULBPA SVDA_SCALADJ SVDA_EXTSUPER SVDA_SUPDERCALC SVDA_PAR_EXCL\n\\* parameter groups\nPARGPNME INCTYP DERINC DERINCLB FORCEN DERINCMUL DERMTHD \\[SPLITTHRESH SPLITRELDIFF SPLITACTION\\]\n(*one such line for each of NPARGP parameter groups*)\n\\* parameter data\nPARNME PARTRANS PARCHGLIM PARVAL1 PARLBND PARUBND PARGP SCALE OFFSET DERCOM\n(*one such line for each of NPAR parameters*)\nPARNME PARTIED\n(*one such line for each tied parameter*)\n\\* observation groups\nOBGNME \\[GTARG\\] \\[COVFLE\\]\n(*one such line for each of NOBSGP observation group*)\n\\* observation data\nOBSNME OBSVAL WEIGHT OBGNME\n(*one such line for each of NOBS observations*)\n\\* derivatives command line\nDERCOMLINE\nEXTDERFLE\n\\* model command line\nCOMLINE\n(*one such line for each of NUMCOM command lines*)\n\\* model input/output\nTEMPFLE INFLE\n(*one such line for each of NTPLFLE template files*)\nINSFLE OUTFLE\n(*one such line for each of NINSLFE instruction files*)\n\\* prior information\nPILBL PIFAC \\* PARNME + PIFAC \\* log(PARNME) ... = PIVAL WEIGHT OBGNME\n(*one such line for each of NPRIOR articles of prior information*)\n\\* predictive analysis\nNPREDMAXMIN \\[PREDNOISE\\]\nPD0 PD1 PD2\nABSPREDLAM RELPREDLAM INITSCHFAC MULSCHFAC NSEARCH\nABSPREDSWH RELPREDSWH\nNPREDNORED ABSPREDSTP RELPREDSTP NPREDSTP\n\\* regularization\nPHIMLIM PHIMACCEPT \\[FRACPHIM\\] \\[MEMSAVE\\]\nWFINIT WFMIN WFMAX \\[LINREG\\] \\[REGCONTINUE\\]\nWFFAC WFTOL IREGADJ \\[NOPTREGADJ REGWEIGHTRAT \\[REGSINGTHRESH\\]\\]\n\\* pareto\nPARETO_OBSGROUP\nPARETO_WTFAC_START PARETO_WTFAC_FIN NUM_WTFAC_INC\nNUM_ITER_START NUM_ITER_GEN NUM_ITER_FIN\nALT_TERM\nOBS_TERM ABOVE_OR_BELOW OBS_THRESH NUM_ITER_THRESH (*only if ALT_TERM is non-zero*)\nNOBS_REPORT\nOBS_REPORT_1 OBS_REPORT_2 OBS_REPORT_3.. (*NOBS_REPORT items*)\nTable A1.1 Variables in the “control data” section of the PEST control file.\n| Variable   | Type     | Values                                                 | Description                                                                                                                 |\n|----------------|--------------|------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| RSTFLE         | text         | “restart” or “norestart”                                   | instructs PEST whether to write restart data                                                                                    |\n| PESTMODE       | text         | “estimation”, “prediction”, “regularization”, “pareto”     | PEST’s mode of operation                                                                                                        |",
      "header": "14. References",
      "level": 1,
      "file_name": "PEST Model-Independent Parameter Estimation: PEST++ a Software Suite for Parameter Estimation, Uncertainty Analysis, Management Optimization and Sensitivity Analysis",
      "prev_id": "6ec92fa30597",
      "next_id": "ec06f012104f",
      "summary_self": "This appendix specifies the PEST control file format (Figure A1.1).  Variables are position-based, space/tab-delimited; strings with spaces are quoted.  Blank lines and comments (#) are allowed (PEST versions ≥15).  Optional variables are in brackets.  PEST++ uses \"++\" prefixed keywords; PEST ignores these.  The first line is \"pcf\".",
      "summary_prev": "This document cites: Ahlfeld and Mulligan (2000), Alfonso and Oliver (2019), Campolongo et al. (2005), Chan (1994), Charnes and Cooper (1959), Chen and Oliver (2013, 2016), Coello et al. (2004), Doherty (2015, 2018a, 2018b), Doherty and Hunt (2009), Doherty and Welter (2010), Duan (1991), Duan et al. (1992, 1993, 1994), Eberhart and Kennedy (1995), Emerick and Reynolds (2013), Engelbrecht (2007), Evensen (2003), Evans and Moshonov (2006), Fienen et al. (2010), Forrest et al. (2016), Hadi (1992), Hantush and Marino (1989), Hill and Tiedeman (2007), Homma and Saltelli (1996), Kennedy (1998), Koch (1999), Lougee-Heimer (2003), Luo et al. (2018), Miller and Wagner (1965), Moore et al. (2010), Morris (1991), Oliver et al. (2008), Paige and Saunders (1982a, 1982b), Remy et al. (2011), Saltelli et al. (2004, 2008), Schafer and Strimmer (2005), Siade et al. (2019), Sobol (2001), Storn and Price (1995, 1997), Tung (1986), and Wagner and Gorelick (1987).",
      "summary_next": "These are the control variables in the \"control data\" section.  All are optional with defaults;  some are used only by PEST.  PEST++ uses \"++\" prefixed keywords.  Integer variables (except NPRIOR) must be >0.  Real variables have specific ranges.  The latest variables are on the PEST++ website.  Parallel run variables (section 5.3.6) are not included.",
      "header_level_1": "",
      "header_level_2": "",
      "header_summary_1": "",
      "header_summary_2": "",
      "keywords": [
        "* control data",
        "* model command line",
        "* model input/output",
        "* observation data",
        "* observation groups",
        "* parameter data",
        "* parameter groups",
        "* prior information",
        "* regularization",
        "* singular value decomposition",
        "ABOVE_OR_BELOW",
        "ABSPREDLAM",
        "ABSPREDSTP",
        "ABSPREDSWH",
        "ALT_TERM",
        "AUIHOLDMAXCHG",
        "AUINUMFREE",
        "AUIPHIRATACCEPT",
        "AUIPHIRATSUF",
        "AUIRESTITN",
        "AUISENSRAT",
        "AUISTARTOPT",
        "BASEJACFILE",
        "BASEPESTFILE",
        "BOUNDSCALE",
        "COMLINE",
        "DERCOM",
        "DERCOMLINE",
        "DERFORGIVE",
        "DERINC",
        "DERINCLB",
        "DERINCMUL",
        "DERMTHD",
        "DOAUI",
        "DOSENREUSE",
        "DPOINT",
        "EIGTHRESH",
        "EIGWRITE",
        "EXTDERFLE",
        "FACORIG",
        "FACPARMAX",
        "FORCEN",
        "FRACPHIM",
        "GTARG",
        "IBOUNDSTICK",
        "ICOR",
        "ICOV",
        "IEIG",
        "INCTYP",
        "INFLE",
        "INITSCHFAC",
        "INSFLE",
        "IREGADJ",
        "IRES",
        "JACFILE",
        "JACUPDATE",
        "JCOSAVE",
        "JCOSAVEITN",
        "LAMFORGIVE",
        "LASTRUN",
        "LINREG",
        "LSQRMODE",
        "LSQR_ATOL",
        "LSQR_BTOL",
        "LSQR_CONLIM",
        "LSQR_ITNLIM",
        "MAXAUI",
        "MAXCOMPDIM",
        "MAXSING",
        "MEMSAVE",
        "MESSFILE",
        "MULSCHFAC",
        "NAUINOACCEPT",
        "NINSFLE",
        "NOAUIPHIRAT",
        "NOBS",
        "NOBSGP",
        "NOBS_REPORT",
        "NOPTMAX",
        "NOPTREGADJ",
        "NOPTSWITCH",
        "NPAR",
        "NPARGP",
        "NPHINORED",
        "NPHISTP",
        "NPREDMAXMIN",
        "NPREDNORED",
        "NPREDSTP",
        "NPRIOR",
        "NRELPAR",
        "NSEARCH",
        "NTPLFLE",
        "NUMCOM",
        "NUMLAM",
        "NUM_ITER_FIN",
        "NUM_ITER_GEN",
        "NUM_ITER_START",
        "OBGNME",
        "OBSNME",
        "OBSREREF",
        "OBSVAL",
        "OBS_TERM",
        "OBS_THRESH",
        "OFFSET",
        "OUTFLE",
        "PARCHGLIM",
        "PARETO_OBSGROUP",
        "PARETO_WTFAC_FIN",
        "PARETO_WTFAC_START",
        "PARGP",
        "PARGPNME",
        "PARLBND",
        "PARNME",
        "PARSAVEITN",
        "PARSAVERUN",
        "PARTIED",
        "PARTRANS",
        "PARUBND",
        "PARVAL1",
        "PD0",
        "PD1",
        "PD2",
        "PESTMODE",
        "PHIABANDON",
        "PHIMACCEPT",
        "PHIMLIM",
        "PHIRATSUF",
        "PHIREDLAM",
        "PHIREDSTP",
        "PHIREDSWH",
        "PHISTOPTHRESH",
        "PIFAC",
        "PILBL",
        "PIVAL",
        "PRECIS",
        "PREDNOISE",
        "REGCONTINUE",
        "REGSINGTHRESH",
        "REGWEIGHTRAT",
        "REISAVEITN",
        "RELPARMAX",
        "RELPARSTP",
        "RELPREDLAM",
        "RELPREDSTP",
        "RELPREDSWH",
        "RLAMBDA1",
        "RLAMFAC",
        "RSTFLE",
        "SCALE",
        "SENALLCALCINT",
        "SENMAXREUSE",
        "SENPIEXCLUDE",
        "SENPREDWEIGHT",
        "SENRELTHRESH",
        "SPLITACTION",
        "SPLITRELDIFF",
        "SPLITSWH",
        "SPLITTHRESH",
        "SVDA_EXTSUPER",
        "SVDA_MULBPA",
        "SVDA_PAR_EXCL",
        "SVDA_SCALADJ",
        "SVDA_SUPDERCALC",
        "SVDMODE",
        "TEMPFLE",
        "UPVECBEND",
        "VERBOSEREC",
        "WFFAC",
        "WFINIT",
        "WFMAX",
        "WFMIN",
        "WFTOL"
      ],
      "similarity": 0.70263530917869,
      "normalized_semantic": 0.70263530917869,
      "normalized_keyword": 0.00356666487641633,
      "combined_score": 0.21328725816709848
    }
  ]
}