{
  "subquestion": "How can I use derforgive?",
  "variations": [],
  "keywords": [
    "derforgive"
  ],
  "raw_results": [
    {
      "chunk_id": "9173261c3d0a",
      "chunk_index": 3,
      "content": "Suppose that LAMFORGIVE is supplied as “lamforgive”. If, after a few parameter upgrade attempts have been made (normally four), it is found that no lambda value leads to an upgraded parameter set that allows the model to complete execution, PEST takes appropriate action. It either switches to central derivatives calculation, or ceases execution altogether (with an appropriate error message).\nSometimes a user may wish to know the parameters that caused model run failure. These are stored in parameter value file format (see section 5 of this manual) in a sequence of files named ###error.par.1, ###error.par.2, etc. Files of this type resulting from a previous run are deleted at the beginning of each new PEST run. Counting starts afresh when PEST starts afresh.\nDERFORGIVE\nDERFORGIVE plays a similar role to LAMFORGIVE. However DERFORGIVE governs PEST’s behaviour when model runs are being undertaken for the purpose of finite-difference derivatives calculation.\nLike LAMFORGIVE, the DERFORGIVE variable (if provided) must be placed on the fifth line of the “control data” section of the PEST control file somewhere after NUMLAM. It must be supplied as either “derforgive” or “noderforgive”. If it is omitted, a value of “noderforgive” is assumed. A value of “noderforgive” preserves normal PEST behaviour following model run failure during derivatives calculation. Under these circumstances PEST makes one attempt to repeat the model run using identical parameter values. If that run fails, PEST ceases execution with an appropriate error message.\nIn contrast, when DERFORGIVE is set to “derforgive” and a model run failure occurs, PEST writes a short message to the screen reporting the absence of each missing model output file that it attempts to read. The partial derivatives of model outputs with respect to the pertinent incrementally-varied parameter are then assigned a value of zero.\nNote that if BEOPEST is being used, the agent which encounters the failed model run, rather than the BEOPEST manager, reports the missing model output files to the screen.",
      "header": "4.2.6 Fifth Line",
      "level": 3,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "2995daaa6e7c",
      "next_id": "794660db7780",
      "summary_self": "If LAMFORGIVE is \"lamforgive\", PEST switches to central derivatives or stops if no lambda produces a successful model run.  Failed parameter sets are saved in ###error.par files. DERFORGIVE (\"derforgive\" or \"noderforgive\") handles derivative calculation failures; \"derforgive\" sets derivatives to zero and reports missing files.",
      "summary_prev": "PEST iteratively adjusts Marquardt lambda (RLAMBDA1, RLAMFAC) to minimize the objective function.  It stops when the objective function reduction is less than PHIRATSUF or PHIREDLAM (Equation 4.2.3). NUMLAM limits lambda tests per iteration.  JACUPDATE (optional) enables Broyden Jacobian updates. LAMFORGIVE (\"lamforgive\" or \"nolamforgive\") handles model run failures.",
      "summary_next": "PEST uses RELPARMAX (relative change), FACPARMAX (factor change), and ABSPARMAX(N) (absolute change) to limit parameter adjustments per iteration (PARCHGLIM specifies the limit type).  These limits prevent overshooting and enhance stability.  Relative limits can severely restrict downward movement; factor limits prevent sign changes.",
      "header_level_1": "4. The PEST Control File",
      "header_level_2": "4.2 Control Data Section",
      "header_summary_1": "Figure 4.2 in PEST software displays control data section variables. The text details options for writing matrices, files, and parameters, including settings for matrix and file saving, operational modes, precision, derivative handling, and convergence criteria. Optional features like sensitivity reuse and LSQR algorithm for solving inverse problems are discussed.",
      "header_summary_2": "Figure 4.2 shows \"control data\" section variables (from Appendix A, Figure A1.1).  Some variables are discussed later. The first line must be \"* control data\";  some variables are optional (in brackets).",
      "keywords": [
        "DERFORGIVE",
        "LAMFORGIVE",
        "NUMLAM"
      ],
      "similarity": 0.769278081569465,
      "normalized_semantic": 0.769278081569465,
      "normalized_keyword": 0.0224435329437256,
      "combined_score": 0.24649389753144743
    },
    {
      "chunk_id": "f69092125bad",
      "chunk_index": 1,
      "content": "The “model command line” section of the PEST control file supplies the command which PEST must use to run the model. Optionally, this section may contain multiple commands. This occurs where the NUMCOM variable in the “control data” section of the PEST control file is present and is set to a number greater than 1. The use of multiple model commands can be useful at times, particular when using a surrogate or proxy model for derivatives.\ncalculation, as can be achieved when using PEST’s observation re-referencing functionality; see section 12.3 and all of section 14 for further details.\nFigure 4.11\nshows specifications for the “model command line” section of the PEST control file.\nmodel command line\nCOMLINE (one such line for each of NUMCOM command lines)\nSpecifications of the “model command line” section of the PEST control file.\nThe command line may be simply the name of an executable file, or it may be the name of a batch or script file containing a complex sequence of steps. Note that you may include the path name in the model command line which you provide to PEST if you wish. If PEST is to be successful in running the model, then the model executable program must reside in the current directory (i.e. folder), or its full path must be provided, or the PATH environment variable must include the folder in which the executable or batch/script file is situated.\nConsider the case of a finite-difference model which calculates the stress field surrounding a tunnel. The input file for this model may be very complicated, involving one or a number of large two or three-dimensional arrays. While parameters can be written to such files using appropriate templates, you may prefer a different approach. Perhaps you wish to estimate rock properties within a small number of zones whose boundaries are known, these zones collectively covering the entire model domain. Furthermore, as is often the case, you may have some preprocessing software which is able to construct the large model arrays from the handful of parameters of interest, namely the elastic properties of the zones into which the model domain has been subdivided. In this case it may be convenient to run the preprocessor prior to running the simulator every time PEST runs the model. This can be accomplished by listing the commands to run both programs in a batch or script file called by PEST as “the model”; hence PEST can now write input files for the preprocessor rather than for the model itself. (Note that programs of the Groundwater Utilities downloadable from the PEST web pages accomplish spatial parameterisation tasks similar to this. More complex spatial parameterisation strategies based on pilot points can be implemented using the PLPROC utility.)\nPerhaps the model output file is voluminous; in fact, often models of this kind write their data to binary files rather than ASCII files, relying on the user’s postprocessing software to make sense of the abundance of model-generated information that is recorded in this file. You may have a postprocessing program which interpolates model-generated stress data to the locations of your stress sensors. In this case PEST should read the postprocessor output file rather than the model output file.\nHence to use PEST in the parameterisation of the above stress-field model, a suitable model command line may be stress where stress.bat is a batch file containing the following sequence of commands.\nprestress3d\nstress3d\npostress3d\nHere PRESTRESS3D and POSTRESS3D are the model pre- and postprocessors respectively; STRESS3D is the stress model itself.\nYou can get even more complicated than this if you wish. For example, a problem that can arise in working with large numerical models is that they do not always converge to a solution according to the model convergence criteria which you, the user, must supply. The popular United States Geological Survey groundwater model, MODFLOW, requires a variable HCLOSE which determines the precision with which heads are calculated by its matrix solver. Variables such as this should be set small so that heads can be calculated with high precision; the accurate calculation of head derivatives depends on this. However if HCLOSE is set too low the solver may never converge to a point where the maximum head correction between successive solver iterations is less than HCLOSE. If this happens MODFLOW will terminate execution with an error message. Unfortunately, it may be very difficult to predict when this will occur as solver behaviour may be perfect for one set of parameters and unsatisfactory for another. Hence, as PEST continually adjusts parameters for derivatives calculation and parameter upgrades, there is a good chance that, on at least one occasion, there will be a solution failure. When this happens PEST will not find the observations it expects on the model output file and will terminate execution with an appropriate error message (unless the LAMFORGIVE or DERFORGIVE control variables prevent PEST from taking this course of action).",
      "header": "4.13 Model Command Line Section",
      "level": 2,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "de031d0b3c6b",
      "next_id": "5294638ad623",
      "summary_self": "The \"model command line\" section (Figure 4.11) specifies commands to run the model (NUMCOM > 1 allows multiple commands).  It can include pre- and post-processing steps (e.g., prestress3d, stress3d, postress3d).  The model executable must be in the current directory, its path specified, or the directory must be in the PATH variable.",
      "summary_prev": "An optional \"derivatives command line\" section specifies how the model calculates and provides derivatives (Chapter 12), required only if JACFILE is non-zero in the \"control data\" section.",
      "summary_next": "To handle model convergence failures (e.g., MODFLOW), an intelligent batch file (Figure 4.12) can increase HCLOSE (HMUL) if errorlevel 100 is detected, then rerun the model until successful, finally resetting HCLOSE (SETORIG).  Batch files can incorporate multiple models or run a single model multiple times for calibration across different time periods.",
      "header_level_1": "4. The PEST Control File",
      "header_level_2": "",
      "header_summary_1": "Figure 4.2 in PEST software displays control data section variables. The text details options for writing matrices, files, and parameters, including settings for matrix and file saving, operational modes, precision, derivative handling, and convergence criteria. Optional features like sensitivity reuse and LSQR algorithm for solving inverse problems are discussed.",
      "header_summary_2": "",
      "keywords": [
        "COMLINE",
        "DERFORGIVE",
        "LAMFORGIVE",
        "NUMCOM"
      ],
      "similarity": 0.714480851354497,
      "normalized_semantic": 0.714480851354497,
      "normalized_keyword": 0.000364963518222794,
      "combined_score": 0.21459972986910508
    },
    {
      "chunk_id": "ec06f012104f",
      "chunk_index": 3,
      "content": "| NPAR           | integer      | greater than zero                                          | number of parameters                                                                                                            |\n| NOBS           | integer      | greater than zero                                          | number of observations                                                                                                          |\n| NPARGP         | integer      | greater than zero                                          | number of parameter groups                                                                                                      |\n| NPRIOR         | integer      | any integer value                                          | absolute value is number of prior information equations; negative value indicates supply of prior information in indexed format |\n| NOBSGP         | integer      | greater than zero                                          | number of observation groups                                                                                                    |\n| MAXCOMPDIM     | integer      | zero or greater                                            | number of elements in compressed Jacobian matrix                                                                                |\n| NTPLFLE        | integer      | greater than zero                                          | number of template files                                                                                                        |\n| NINSFLE        | integer      | greater than zero                                          | number of instruction files                                                                                                     |\n| PRECIS         | text         | “single” or “double”                                       | format for writing parameter values to model input files                                                                        |\n| DPOINT         | text         | “point” or “nopoint”                                       | omit decimal point in parameter values if possible                                                                              |\n| NUMCOM         | integer      | greater than zero                                          | number of command lines used to run model                                                                                       |\n| JACFILE        | integer      | 0, 1 or -1                                                 | indicates whether model provides external derivatives file                                                                      |\n| MESSFILE       | integer      | zero or one                                                | indicates whether PEST writes PEST-to-model message file                                                                        |\n| OBSREREF       | text         | “obsreref”, “obsreref_N” or “noobsreref”                   | activates or de-activates observation re-referencing (with an optional pause after re-referencing runs)                         |\n| RLAMBDA1       | real         | zero or greater                                            | initial Marquardt lambda                                                                                                        |\n| RLAMFAC        | real         | positive or negative, but not zero                         | dictates Marquardt lambda adjustment process                                                                                    |\n| PHIRATSUF      | real         | between zero and one                                       | fractional objective function sufficient for end of current iteration                                                           |\n| PHIREDLAM      | real         | between zero and one                                       | termination criterion for Marquardt lambda search                                                                               |\n| NUMLAM         | integer      | one or greater; possibly negative with Parallel or BEOPEST | maximum number of Marquardt lambdas to test                                                                                     |\n| JACUPDATE      | integer      | zero or greater                                            | activation of Broyden’s Jacobian update procedure                                                                               |\n| LAMFORGIVE     | text         | “lamforgive” or “nolamforgive”                             | treat model run failure during lambda search as high objective function                                                         |\n| DERFORGIVE     | text         | “derforgive” or “noderforgive”                             | accommodates model failure during Jacobian runs by setting pertinent sensitivities to zero                                      |\n| RELPARMAX      | real         | greater than zero                                          | parameter relative change limit                                                                                                 |\n| FACPARMAX      | real         | greater than one                                           | parameter factor change limit                                                                                                   |\n| FACORIG        | real         | between zero and one                                       | minimum fraction of original parameter value in evaluating relative change                                                      |\n| ABSPARMAX(*N*) | real         | greater than zero                                          | parameter absolute change limit – *N’*th instance                                                                               |\n| IBOUNDSTICK    | integer      | zero or greater                                            | instructs PEST not to compute derivatives for parameter at its bounds                                                           |\n| UPVECBEND      | integer      | zero or one                                                | instructs PEST to bend parameter upgrade vector if parameter hits bounds                                                        |\n| PHIREDSWH      | real         | between zero and one                                       | sets objective function change for introduction of central derivatives                                                          |\n| NOPTSWITCH     | integer      | one or greater                                             | iteration before which PEST will not switch to central derivatives computation                                                  |\n| SPLITSWH       | real         | zero or greater                                            | the factor by which the objective function rises to invoke split slope derivatives analysis until end of run                    |\n| DOAUI          | text         | “aui”, “auid”, or “noaui”                                  | instructs PEST to implement automatic user intervention                                                                         |\n| DOSENREUSE     | text         | “senreuse” or “nosenreuse”                                 | instructs PEST to reuse parameter sensitivities                                                                                 |\n| BOUNDSCALE     | text         | “boundscale” or “noboundscale”                             | parameters are scaled by the inter-bounds interval if using singular value decomposition, LSQR or SVDA                          |\n| NOPTMAX        | integer      | -2, -1, 0, or any number greater than zero                 | number of optimization iterations                                                                                               |\n| PHIREDSTP      | real         | greater than zero                                          | relative objective function reduction triggering termination                                                                    |\n| NPHISTP        | integer      | greater than zero                                          | number of successive iterations over which PHIREDSTP applies                                                                    |\n| NPHINORED      | integer      | greater than zero                                          | number of iterations since last drop in objective function to trigger termination                                               |\n| RELPARSTP      | real         | greater than zero                                          | maximum relative parameter change triggering termination                                                                        |\n| NRELPAR        | integer      | greater than zero                                          | number of successive iterations over which RELPARSTP applies                                                                    |\n| PHISTOPTHRESH  | real         | zero or greater                                            | objective function threshold triggering termination                                                                             |\n| LASTRUN        | integer      | zero or one                                                | instructs PEST to undertake (or not) final model run with best parameters                                                       |\n| PHIABANDON     | real or text | a positive number or name of a file                        | objective function value at which to abandon optimization process or filename containing abandonment schedule                   |\n| ICOV           | integer      | zero or one                                                | record covariance matrix in matrix file                                                                                         |\n| ICOR           | integer      | zero or one                                                | record correlation coefficient matrix in matrix file                                                                            |\n| IEIG           | integer      | zero or one                                                | record eigenvectors in matrix file                                                                                              |\n| IRES           | integer      | zero or one                                                | record resolution data                                                                                                          |\n| JCOSAVE        | text         | “jcosave” or “nojcosave”                                   | save best Jacobian file as a JCO file - overwriting previously saved files of the same name as the inversion process progresses |",
      "header": "14. References",
      "level": 1,
      "file_name": "PEST Model-Independent Parameter Estimation: PEST++ a Software Suite for Parameter Estimation, Uncertainty Analysis, Management Optimization and Sensitivity Analysis",
      "prev_id": "36260bc07205",
      "next_id": "29df72298597",
      "summary_self": "These are the control variables in the \"control data\" section.  All are optional with defaults;  some are used only by PEST.  PEST++ uses \"++\" prefixed keywords.  Integer variables (except NPRIOR) must be >0.  Real variables have specific ranges.  The latest variables are on the PEST++ website.  Parallel run variables (section 5.3.6) are not included.",
      "summary_prev": "This appendix specifies the PEST control file format (Figure A1.1).  Variables are position-based, space/tab-delimited; strings with spaces are quoted.  Blank lines and comments (#) are allowed (PEST versions ≥15).  Optional variables are in brackets.  PEST++ uses \"++\" prefixed keywords; PEST ignores these.  The first line is \"pcf\".",
      "summary_next": "This appendix details PEST control file variables (Figures A1.1, A1.2-A1.7).  All PEST++ variables are \"++\" prefixed keywords.  Variable types (integer, real, text) and values are specified.  Some variables are optional (with defaults).  Some sections/variables are ignored by PEST++.  Parameter group variables control finite-difference derivative calculations (section 3.3).",
      "header_level_1": "",
      "header_level_2": "",
      "header_summary_1": "",
      "header_summary_2": "",
      "keywords": [
        "BOUNDSCALE",
        "DERFORGIVE",
        "DOAUI",
        "DOSENREUSE",
        "DPOINT",
        "FACORIG",
        "FACPARMAX",
        "IBOUNDSTICK",
        "ICOR",
        "ICOV",
        "IEIG",
        "IRES",
        "JACFILE",
        "JACUPDATE",
        "JCOSAVE",
        "LAMFORGIVE",
        "LASTRUN",
        "MAXCOMPDIM",
        "MESSFILE",
        "NINSFLE",
        "NOBS",
        "NOBSGP",
        "NOPTMAX",
        "NOPTSWITCH",
        "NPAR",
        "NPARGP",
        "NPHINORED",
        "NPHISTP",
        "NPRIOR",
        "NRELPAR",
        "NTPLFLE",
        "NUMCOM",
        "NUMLAM",
        "OBSREREF",
        "PHIABANDON",
        "PHIRATSUF",
        "PHIREDLAM",
        "PHIREDSTP",
        "PHIREDSWH",
        "PHISTOPTHRESH",
        "PRECIS",
        "RELPARMAX",
        "RELPARSTP",
        "RLAMBDA1",
        "RLAMFAC",
        "SPLITSWH",
        "UPVECBEND",
        "lambdas"
      ],
      "similarity": 0.672431428883588,
      "normalized_semantic": 0.672431428883588,
      "normalized_keyword": 0.0056414557620883,
      "combined_score": 0.20567844769853824
    },
    {
      "chunk_id": "36260bc07205",
      "chunk_index": 2,
      "content": "Wagner, B.J. and Gorelick, S.M., 1987. Optimal groundwater quality management under parameter uncertainty. *Water. Resour. Res.* 23(7), 1162-1174.\nWelter, D.E., Doherty, J.E., Hunt, R.J., Muffels, C.T., Tonkin, M.J., and Schreüder, W.A., 2012. Approaches in highly parameterized inversion - PEST++, a Parameter ESTimation code optimized for large environmental models: U.S. Geological Survey Techniques and Methods, book 7, section C5, 47 p., available at .\nWelter, D.E., White, J.T., Hunt, R.J., and Doherty, J.E., 2015. [Approaches in highly parameterized inversion: PEST++ Version 3, a Parameter ESTimation and uncertainty analysis software suite optimized for large environmental models](https://pubs.er.usgs.gov/publication/tm7C12). U.S. Geological Survey Techniques and Methods, book 7, section C12, 54 p.\nWhite, J.T., 2018. A model-independent iterative ensemble smoother for efficient history-matching and uncertainty quantification in very high dimensions. Accepted for publication in *Environmental Modelling and Software*.\nWhite, J.T., Fienen, M.N., Barlow, P.M. and Welter, D.E., 2018. A tool for efficient, model-independent management optimization under uncertainty. *Environmental Modelling and Software*, 100, 213-221.\nWhite, J.T., Fienen, M.N. and Doherty, J.E., 2016. A Python framework for environmental model uncertainty analysis. *Environmental Modelling and Software*, 85, 217-228.\nWhite, J.T., Doherty, J.E. and Hughes, J.D., 2014. Quantifying the predictive consequences of model error with linear subspace analysis. *Water Resour. Res*. 50 (2): 1152-1173. DOI: 10.1002/2013WR014767\nZhang, J., Lin, G., Li, W., Wu, L., & Zeng, L. (2018). An iterative local updating ensemble smoother for estimation and uncertainty assessment of hydrologic model parameters with multimodal distributions. *Water Resources Research*, 54, 1716– 1733.\n**Appendix**\nThis appendix provides specifications for a PEST control file.\nVariables are recognized by their position in the file. They must be placed on the correct line of this file and separated from their neighbours by at least one space.\nPEST, BEOPEST and many of the PEST-support utility programs which are documented in part II of the PEST manual tolerate the presence of the following items in a PEST control file:\n- blank lines;\n- comments;\n- lines that begin with the character string “++”.\nLines that begin with “++” are used for the insertion of variables which control the operation of the PEST++ suite of programs.\nComments can be placed on their own line. Alternatively, they can be placed at the end of a line which provides PEST control data. In either case, a comment follows a “#” character. Note, however, that this character is not construed as denoting the presence of an ensuing comment under any of the following circumstances:\n- it is not preceded by a space, tab or the beginning of a line;\n- it is part of a string that is enclosed in quotes.\nThese exceptions preclude mis-construing the presence of the “#” character in a filename as signifying the start of a comment.\nSome of the older utilities that are documented in part II of the PEST manual do not tolerate the presence of blank lines, “++” lines or comments. All of these items can be removed from a PEST control file using the PSTCLEAN utility supplied with the PEST suite.\nFigure A1.1 Names and locations of variables in the PEST control file. Optional variables are enclosed in square brackets.\npcf\n\\* control data\nRSTFLE PESTMODE\nNPAR NOBS NPARGP NPRIOR NOBSGP \\[MAXCOMPDIM\\]\\[DERZEROLIM\\]\nNTPLFLE NINSFLE PRECIS DPOINT \\[NUMCOM JACFILE MESSFILE\\] \\[OBSREREF\\]\nRLAMBDA1 RLAMFAC PHIRATSUF PHIREDLAM NUMLAM \\[JACUPDATE\\] \\[LAMFORGIVE\\] \\[DERFORGIVE\\]\nRELPARMAX FACPARMAX FACORIG \\[IBOUNDSTICK UPVECBEND\\] \\[ABSPARMAX\\]\nPHIREDSWH \\[NOPTSWITCH\\] \\[SPLITSWH\\] \\[DOAUI\\] \\[DOSENREUSE\\] \\[BOUNDSCALE\\]\nNOPTMAX PHIREDSTP NPHISTP NPHINORED RELPARSTP NRELPAR \\[PHISTOPTHRESH\\] \\[LASTRUN\\] \\[PHIABANDON\\]\nICOV ICOR IEIG \\[IRES\\] \\[JCOSAVE\\] \\[VERBOSEREC\\] \\[JCOSAVEITN\\] \\[REISAVEITN\\] \\[PARSAVEITN\\] \\[PARSAVERUN\\]\n\\* sensitivity reuse\nSENRELTHRESH SENMAXREUSE\nSENALLCALCINT SENPREDWEIGHT SENPIEXCLUDE\n\\* singular value decomposition\nSVDMODE\nMAXSING EIGTHRESH\nEIGWRITE\n\\* lsqr\nLSQRMODE\nLSQR_ATOL LSQR_BTOL LSQR_CONLIM LSQR_ITNLIM\nLSQRWRITE\n\\* automatic user intervention\nMAXAUI AUISTARTOPT NOAUIPHIRAT AUIRESTITN\nAUISENSRAT AUIHOLDMAXCHG AUINUMFREE\nAUIPHIRATSUF AUIPHIRATACCEPT NAUINOACCEPT\n\\* svd assist\nBASEPESTFILE\nBASEJACFILE\nSVDA_MULBPA SVDA_SCALADJ SVDA_EXTSUPER SVDA_SUPDERCALC SVDA_PAR_EXCL\n\\* parameter groups\nPARGPNME INCTYP DERINC DERINCLB FORCEN DERINCMUL DERMTHD \\[SPLITTHRESH SPLITRELDIFF SPLITACTION\\]\n(*one such line for each of NPARGP parameter groups*)\n\\* parameter data\nPARNME PARTRANS PARCHGLIM PARVAL1 PARLBND PARUBND PARGP SCALE OFFSET DERCOM\n(*one such line for each of NPAR parameters*)\nPARNME PARTIED\n(*one such line for each tied parameter*)\n\\* observation groups\nOBGNME \\[GTARG\\] \\[COVFLE\\]\n(*one such line for each of NOBSGP observation group*)\n\\* observation data\nOBSNME OBSVAL WEIGHT OBGNME\n(*one such line for each of NOBS observations*)\n\\* derivatives command line\nDERCOMLINE\nEXTDERFLE\n\\* model command line\nCOMLINE\n(*one such line for each of NUMCOM command lines*)\n\\* model input/output\nTEMPFLE INFLE\n(*one such line for each of NTPLFLE template files*)\nINSFLE OUTFLE\n(*one such line for each of NINSLFE instruction files*)\n\\* prior information\nPILBL PIFAC \\* PARNME + PIFAC \\* log(PARNME) ... = PIVAL WEIGHT OBGNME\n(*one such line for each of NPRIOR articles of prior information*)\n\\* predictive analysis\nNPREDMAXMIN \\[PREDNOISE\\]\nPD0 PD1 PD2\nABSPREDLAM RELPREDLAM INITSCHFAC MULSCHFAC NSEARCH\nABSPREDSWH RELPREDSWH\nNPREDNORED ABSPREDSTP RELPREDSTP NPREDSTP\n\\* regularization\nPHIMLIM PHIMACCEPT \\[FRACPHIM\\] \\[MEMSAVE\\]\nWFINIT WFMIN WFMAX \\[LINREG\\] \\[REGCONTINUE\\]\nWFFAC WFTOL IREGADJ \\[NOPTREGADJ REGWEIGHTRAT \\[REGSINGTHRESH\\]\\]\n\\* pareto\nPARETO_OBSGROUP\nPARETO_WTFAC_START PARETO_WTFAC_FIN NUM_WTFAC_INC\nNUM_ITER_START NUM_ITER_GEN NUM_ITER_FIN\nALT_TERM\nOBS_TERM ABOVE_OR_BELOW OBS_THRESH NUM_ITER_THRESH (*only if ALT_TERM is non-zero*)\nNOBS_REPORT\nOBS_REPORT_1 OBS_REPORT_2 OBS_REPORT_3.. (*NOBS_REPORT items*)\nTable A1.1 Variables in the “control data” section of the PEST control file.\n| Variable   | Type     | Values                                                 | Description                                                                                                                 |\n|----------------|--------------|------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| RSTFLE         | text         | “restart” or “norestart”                                   | instructs PEST whether to write restart data                                                                                    |\n| PESTMODE       | text         | “estimation”, “prediction”, “regularization”, “pareto”     | PEST’s mode of operation                                                                                                        |",
      "header": "14. References",
      "level": 1,
      "file_name": "PEST Model-Independent Parameter Estimation: PEST++ a Software Suite for Parameter Estimation, Uncertainty Analysis, Management Optimization and Sensitivity Analysis",
      "prev_id": "6ec92fa30597",
      "next_id": "ec06f012104f",
      "summary_self": "This appendix specifies the PEST control file format (Figure A1.1).  Variables are position-based, space/tab-delimited; strings with spaces are quoted.  Blank lines and comments (#) are allowed (PEST versions ≥15).  Optional variables are in brackets.  PEST++ uses \"++\" prefixed keywords; PEST ignores these.  The first line is \"pcf\".",
      "summary_prev": "This document cites: Ahlfeld and Mulligan (2000), Alfonso and Oliver (2019), Campolongo et al. (2005), Chan (1994), Charnes and Cooper (1959), Chen and Oliver (2013, 2016), Coello et al. (2004), Doherty (2015, 2018a, 2018b), Doherty and Hunt (2009), Doherty and Welter (2010), Duan (1991), Duan et al. (1992, 1993, 1994), Eberhart and Kennedy (1995), Emerick and Reynolds (2013), Engelbrecht (2007), Evensen (2003), Evans and Moshonov (2006), Fienen et al. (2010), Forrest et al. (2016), Hadi (1992), Hantush and Marino (1989), Hill and Tiedeman (2007), Homma and Saltelli (1996), Kennedy (1998), Koch (1999), Lougee-Heimer (2003), Luo et al. (2018), Miller and Wagner (1965), Moore et al. (2010), Morris (1991), Oliver et al. (2008), Paige and Saunders (1982a, 1982b), Remy et al. (2011), Saltelli et al. (2004, 2008), Schafer and Strimmer (2005), Siade et al. (2019), Sobol (2001), Storn and Price (1995, 1997), Tung (1986), and Wagner and Gorelick (1987).",
      "summary_next": "These are the control variables in the \"control data\" section.  All are optional with defaults;  some are used only by PEST.  PEST++ uses \"++\" prefixed keywords.  Integer variables (except NPRIOR) must be >0.  Real variables have specific ranges.  The latest variables are on the PEST++ website.  Parallel run variables (section 5.3.6) are not included.",
      "header_level_1": "",
      "header_level_2": "",
      "header_summary_1": "",
      "header_summary_2": "",
      "keywords": [
        "* control data",
        "* model command line",
        "* model input/output",
        "* observation data",
        "* observation groups",
        "* parameter data",
        "* parameter groups",
        "* prior information",
        "* regularization",
        "* singular value decomposition",
        "ABOVE_OR_BELOW",
        "ABSPREDLAM",
        "ABSPREDSTP",
        "ABSPREDSWH",
        "ALT_TERM",
        "AUIHOLDMAXCHG",
        "AUINUMFREE",
        "AUIPHIRATACCEPT",
        "AUIPHIRATSUF",
        "AUIRESTITN",
        "AUISENSRAT",
        "AUISTARTOPT",
        "BASEJACFILE",
        "BASEPESTFILE",
        "BOUNDSCALE",
        "COMLINE",
        "DERCOM",
        "DERCOMLINE",
        "DERFORGIVE",
        "DERINC",
        "DERINCLB",
        "DERINCMUL",
        "DERMTHD",
        "DOAUI",
        "DOSENREUSE",
        "DPOINT",
        "EIGTHRESH",
        "EIGWRITE",
        "EXTDERFLE",
        "FACORIG",
        "FACPARMAX",
        "FORCEN",
        "FRACPHIM",
        "GTARG",
        "IBOUNDSTICK",
        "ICOR",
        "ICOV",
        "IEIG",
        "INCTYP",
        "INFLE",
        "INITSCHFAC",
        "INSFLE",
        "IREGADJ",
        "IRES",
        "JACFILE",
        "JACUPDATE",
        "JCOSAVE",
        "JCOSAVEITN",
        "LAMFORGIVE",
        "LASTRUN",
        "LINREG",
        "LSQRMODE",
        "LSQR_ATOL",
        "LSQR_BTOL",
        "LSQR_CONLIM",
        "LSQR_ITNLIM",
        "MAXAUI",
        "MAXCOMPDIM",
        "MAXSING",
        "MEMSAVE",
        "MESSFILE",
        "MULSCHFAC",
        "NAUINOACCEPT",
        "NINSFLE",
        "NOAUIPHIRAT",
        "NOBS",
        "NOBSGP",
        "NOBS_REPORT",
        "NOPTMAX",
        "NOPTREGADJ",
        "NOPTSWITCH",
        "NPAR",
        "NPARGP",
        "NPHINORED",
        "NPHISTP",
        "NPREDMAXMIN",
        "NPREDNORED",
        "NPREDSTP",
        "NPRIOR",
        "NRELPAR",
        "NSEARCH",
        "NTPLFLE",
        "NUMCOM",
        "NUMLAM",
        "NUM_ITER_FIN",
        "NUM_ITER_GEN",
        "NUM_ITER_START",
        "OBGNME",
        "OBSNME",
        "OBSREREF",
        "OBSVAL",
        "OBS_TERM",
        "OBS_THRESH",
        "OFFSET",
        "OUTFLE",
        "PARCHGLIM",
        "PARETO_OBSGROUP",
        "PARETO_WTFAC_FIN",
        "PARETO_WTFAC_START",
        "PARGP",
        "PARGPNME",
        "PARLBND",
        "PARNME",
        "PARSAVEITN",
        "PARSAVERUN",
        "PARTIED",
        "PARTRANS",
        "PARUBND",
        "PARVAL1",
        "PD0",
        "PD1",
        "PD2",
        "PESTMODE",
        "PHIABANDON",
        "PHIMACCEPT",
        "PHIMLIM",
        "PHIRATSUF",
        "PHIREDLAM",
        "PHIREDSTP",
        "PHIREDSWH",
        "PHISTOPTHRESH",
        "PIFAC",
        "PILBL",
        "PIVAL",
        "PRECIS",
        "PREDNOISE",
        "REGCONTINUE",
        "REGSINGTHRESH",
        "REGWEIGHTRAT",
        "REISAVEITN",
        "RELPARMAX",
        "RELPARSTP",
        "RELPREDLAM",
        "RELPREDSTP",
        "RELPREDSWH",
        "RLAMBDA1",
        "RLAMFAC",
        "RSTFLE",
        "SCALE",
        "SENALLCALCINT",
        "SENMAXREUSE",
        "SENPIEXCLUDE",
        "SENPREDWEIGHT",
        "SENRELTHRESH",
        "SPLITACTION",
        "SPLITRELDIFF",
        "SPLITSWH",
        "SPLITTHRESH",
        "SVDA_EXTSUPER",
        "SVDA_MULBPA",
        "SVDA_PAR_EXCL",
        "SVDA_SCALADJ",
        "SVDA_SUPDERCALC",
        "SVDMODE",
        "TEMPFLE",
        "UPVECBEND",
        "VERBOSEREC",
        "WFFAC",
        "WFINIT",
        "WFMAX",
        "WFMIN",
        "WFTOL"
      ],
      "similarity": 0.661927441897173,
      "normalized_semantic": 0.661927441897173,
      "normalized_keyword": 0.00587621331214905,
      "combined_score": 0.20269158188765626
    },
    {
      "chunk_id": "093533cf8535",
      "chunk_index": 1,
      "content": "4.2.1 General\nVariables appearing in the “control data” section of the PEST control file are shown in figure 4.2 (which is reproduced from figure A1.1 of appendix A). These will now be discussed line by line. However discussion of some optional variables will be left until later sections of this manual where a broader discussion of the capabilities to which they pertain will be presented.\n* control data\nRSTFLE PESTMODE\nNPAR NOBS NPARGP NPRIOR NOBSGP [MAXCOMPDIM] [DERZEROLIM]\nNTPLFLE NINSFLE PRECIS DPOINT [NUMCOM JACFILE MESSFILE] [OBSREREF]\nRLAMBDA1 RLAMFAC PHIRATSUF PHIREDLAM NUMLAM [JACUPDATE] [LAMFORGIVE] [DERFORGIVE]\nRELPARMAX FACPARMAX FACORIG [IBOUNDSTICK UPVECBEND] [ABSPARMAX]\nPHIREDSWH [NOPTSWITCH] [SPLITSWH] [DOAUI] [DOSENREUSE] [BOUNDSCALE]\nNOPTMAX PHIREDSTP NPHISTP NPHINORED RELPARSTP NRELPAR [PHISTOPTHRESH] [LASTRUN] [PHIABANDON]\nICOV ICOR IEIG [IRES] [JCOSAVE] [VERBOSEREC] [JCOSAVEITN] [REISAVEITN] [PARSAVEITN] [PARSAVERUN]\nFigure 4.2 Variables in the “control data” section of a PEST control file.\n4.2.2 First Line\nThe first line of the “control data” section of the PEST control file must contain the string “* control data”. Note that the “*” character is followed by a space.",
      "header": "4.2 Control Data Section",
      "level": 2,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "5274747d7796",
      "next_id": "9b2451e25955",
      "summary_self": "Figure 4.2 shows \"control data\" section variables (from Appendix A, Figure A1.1).  Some variables are discussed later. The first line must be \"* control data\";  some variables are optional (in brackets).",
      "summary_prev": "This PEST control file (Figure 4.1) includes control data, parameter groups (ro, h), parameter data (ro1, ro2, ro3, h1, h2), observation groups (obsgp1, obsgp2, prgp1), observation data, model command line, model input/output, and prior information.  Blank lines, comments (#), and \"++\" lines are allowed (except in older utilities; use PSTCLEAN to remove them).",
      "summary_next": "RSTFLE (\"restart\" or \"norestart\") enables PEST's restart capability (Appendix B). PESTMODE (\"estimation\", \"prediction\", \"regularisation\", or \"pareto\") selects the operational mode;  additional mode-specific sections may be included.",
      "header_level_1": "4. The PEST Control File",
      "header_level_2": "",
      "header_summary_1": "Figure 4.2 in PEST software displays control data section variables. The text details options for writing matrices, files, and parameters, including settings for matrix and file saving, operational modes, precision, derivative handling, and convergence criteria. Optional features like sensitivity reuse and LSQR algorithm for solving inverse problems are discussed.",
      "header_summary_2": "",
      "keywords": [
        "* control data",
        "BOUNDSCALE",
        "DERFORGIVE",
        "DOAUI",
        "DOSENREUSE",
        "DPOINT",
        "FACORIG",
        "FACPARMAX",
        "IBOUNDSTICK",
        "ICOR",
        "ICOV",
        "IEIG",
        "IRES",
        "JACFILE",
        "JACUPDATE",
        "JCOSAVE",
        "JCOSAVEITN",
        "LAMFORGIVE",
        "LASTRUN",
        "MAXCOMPDIM",
        "MESSFILE",
        "NINSFLE",
        "NOBS",
        "NOBSGP",
        "NOPTMAX",
        "NOPTSWITCH",
        "NPAR",
        "NPARGP",
        "NPHINORED",
        "NPHISTP",
        "NPRIOR",
        "NRELPAR",
        "NTPLFLE",
        "NUMCOM",
        "NUMLAM",
        "OBSREREF",
        "PARSAVEITN",
        "PARSAVERUN",
        "PESTMODE",
        "PHIABANDON",
        "PHIRATSUF",
        "PHIREDLAM",
        "PHIREDSTP",
        "PHIREDSWH",
        "PHISTOPTHRESH",
        "PRECIS",
        "REISAVEITN",
        "RELPARMAX",
        "RELPARSTP",
        "RLAMBDA1",
        "RLAMFAC",
        "RSTFLE",
        "SPLITSWH",
        "UPVECBEND",
        "VERBOSEREC"
      ],
      "similarity": 0.670398851013253,
      "normalized_semantic": 0.670398851013253,
      "normalized_keyword": 0,
      "combined_score": 0.20111965530397594
    },
    {
      "chunk_id": "43c6e8ea67dc",
      "chunk_index": 1,
      "content": "To address this issue, PEST supports compressed internal storage of the Jacobian matrix. This compressed storage mechanism is supplemented by programming within PEST that accesses elements of the compressed Jacobian matrix in ways that are most efficient for the types of Jacobian matrix calculations normally undertaken by PEST. There is some loss in inversion speed incurred by the use of compressed Jacobian matrix storage; however the cost of compression has been reduced as much as possible.\nJacobian matrix compression is activated through use of an optional variable which resides on the third line of the “control data” section of the PEST control file. This variable is named MAXCOMPDIM; see figure 15.1 for its location. If MAXCOMPDIM is omitted from the PEST control file, or is set to 1 or less, no Jacobian compression takes place. If it is set to greater than 1, the vector which holds the compressed form of the Jacobian matrix is dimensioned as MAXCOMPDIM, and Jacobian compression takes place. If, in the course of its execution, PEST discovers that MAXCOMPDIM has not been set large enough to hold the compressed Jacobian matrix, it will cease execution with an appropriate error message.\n* control data\nRSTFLE PESTMODE\nNPAR NOBS NPARGP NPRIOR NOBSGP [MAXCOMPDIM] [DERZEROLIM]\nNTPLFLE NINSFLE PRECIS DPOINT [NUMCOM JACFILE MESSFILE] [OBSREREF]\nRLAMBDA1 RLAMFAC PHIRATSUF PHIREDLAM NUMLAM [JACUPDATE] [LAMFORGIVE] [DERFORGIVE]\nRELPARMAX FACPARMAX FACORIG [IBOUNDSTICK UPVECBEND] [ABSPARMAX]\nPHIREDSWH [NOPTSWITCH] [SPLITSWH] [DOAUI] [DOSENREUSE] [BOUNDSCALE]\nNOPTMAX PHIREDSTP NPHISTP NPHINORED RELPARSTP NRELPAR [PHISTOPTHRESH] [LASTRUN] [PHIABANDON]\nICOV ICOR IEIG [IRES] [JCOSAVE] [VERBOSEREC] [JCOSAVEITN] [REISAVEITN] [PARSAVEITN] [PARSAVERUN]\nFigure 15.1 “Control data” section of the PEST control file with the optional MAXCOMPDIM variable highlighted.\nThe exact manner in which PEST stores the compressed Jacobian matrix depends on the value that is supplied for MAXCOMPDIM. If it is possible, PEST tries to subdivide the Jacobian matrix into two submatrices. The first (with dimensions no×m) pertains only to observations; the second (with dimensions np×m) pertains only to prior information. Not only is the second submatrix normally much sparser than the first. Its elements need to be calculated only once.\nIf the user-supplied value for MAXCOMPDIM is greater than no×m + nnz + 10 where nnz, then number of non-zero elements in the prior information submatrix of the Jacobian matrix is the PEST will store the observation submatrix of the Jacobian matrix in standard form (to allow easy access to elements of this matrix). Meanwhile it stores the prior information submatrix of the Jacobian matrix in compressed format wherein internal indexing is such as to allow rapid access to neighbouring nonzero elements where nonzero elements are very sparse. In many inversion contexts nnz is easily calculated. For example if there are np prior information equations, and each such equation cites nc parameters, then nnz is readily calculated as np × n. c PEST knows soon after commencement of execution whether it can adopt this second.\nprotocol for storage of the Jacobian matrix. If it cannot, then it adopts the first protocol wherein compressed storage is implemented for the entirety of the Jacobian matrix. However this brings with it the problem that PEST does not have foreknowledge of how many zero-valued elements the observation component of the Jacobian matrix will contain. This can only be known as the Jacobian matrix is actually filled, either through the undertaking of model runs for the purposes of finite-difference derivatives calculation or through reading a model-produced external derivatives file. Under the former circumstances, a large number of model runs need to be undertaken before PEST ceases execution with an error message that MAXCOMPDIM needs to be set higher.\nIf PEST does indeed inform you that MAXCOMPDIM needs to be set higher, then the PEST control file must be edited accordingly and PEST re-started. Fortunately execution of PEST can then be re-commenced with the “/s” or “/d” switches (depending on whether it is being run in parallel or serial mode). Previous model runs are therefore not wasted.",
      "header": "15.4.2 The MAXCOMPDIM Control Variable",
      "level": 3,
      "file_name": "PEST Model-Independent Parameter Estimation. User Manual Part I: PEST, SENSAN and Global Optimisers",
      "prev_id": "8c1f42813f75",
      "next_id": "73127b7a589f",
      "summary_self": "MAXCOMPDIM (integer, >1 in \"control data\" section, Figure 15.1) activates Jacobian matrix compression, potentially reducing memory usage but slowing inversion.  PEST prioritizes compressing the prior information submatrix; if MAXCOMPDIM is insufficient, it stops with an error message.  Restarting via `/s` or `/d` is possible after editing MAXCOMPDIM.",
      "summary_prev": "In highly parameterized inversions, Jacobian matrix storage (dimensions (no+np)×m) can be excessive.  Many sensitivities and Tikhonov regularization elements are often zero. A data storage mechanism that omits zero-valued elements significantly reduces PEST's memory requirements.",
      "summary_next": "DERZEROLIM (real, optional, after MAXCOMPDIM in \"control data\" section) sets a threshold for omitting near-zero finite-difference derivatives from compressed Jacobian storage (MAXCOMPDIM > 1). It filters numerical noise but does not affect externally calculated derivatives.",
      "header_level_1": "15. Large Numbers of Parameters",
      "header_level_2": "15.4 Compressed Internal Jacobian Storage",
      "header_summary_1": "This chapter discusses efficient calibration methods for models with tens of thousands of parameters using PEST. Adjoint techniques are recommended for highly parameterized models. Use compressed binary external derivatives files, 64-bit versions of PEST for large problems, and optimize Jacobian matrix storage. Prioritize linearity of regularization constraints and activate memory conservation for improved efficiency.",
      "header_summary_2": "In highly parameterized inversions, excessive Jacobian matrix storage can be reduced by omitting zero-valued elements. MAXCOMPDIM in PEST activates Jacobian matrix compression, prioritizing compressing the prior information submatrix. DERZEROLIM sets a threshold for omitting near-zero finite-difference derivatives, filtering numerical noise in compressed Jacobian storage.",
      "keywords": [
        "* control data",
        "BOUNDSCALE",
        "DERFORGIVE",
        "DOAUI",
        "DOSENREUSE",
        "DPOINT",
        "FACORIG",
        "FACPARMAX",
        "IBOUNDSTICK",
        "ICOR",
        "ICOV",
        "IEIG",
        "IRES",
        "JACFILE",
        "JACUPDATE",
        "JCOSAVE",
        "JCOSAVEITN",
        "LAMFORGIVE",
        "LASTRUN",
        "MAXCOMPDIM",
        "MESSFILE",
        "NINSFLE",
        "NOBS",
        "NOBSGP",
        "NOPTMAX",
        "NOPTSWITCH",
        "NPAR",
        "NPARGP",
        "NPHINORED",
        "NPHISTP",
        "NPRIOR",
        "NRELPAR",
        "NTPLFLE",
        "NUMCOM",
        "NUMLAM",
        "OBSREREF",
        "PARSAVEITN",
        "PARSAVERUN",
        "PESTMODE",
        "PHIABANDON",
        "PHIRATSUF",
        "PHIREDLAM",
        "PHIREDSTP",
        "PHIREDSWH",
        "PHISTOPTHRESH",
        "PRECIS",
        "REISAVEITN",
        "RELPARMAX",
        "RELPARSTP",
        "RLAMBDA1",
        "RLAMFAC",
        "RSTFLE",
        "SPLITSWH",
        "UPVECBEND",
        "VERBOSEREC"
      ],
      "similarity": 0.658777217305388,
      "normalized_semantic": 0.658777217305388,
      "normalized_keyword": 0.000719424453563988,
      "combined_score": 0.1981367623091112
    }
  ]
}